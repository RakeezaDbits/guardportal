{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Asset & Title Protection Portal\n\n## Overview\n\nThis is a comprehensive property protection service platform that enables homeowners to book security audits and protection services. The system facilitates the complete customer journey from initial landing page visit through appointment booking, payment processing, and document signing. Built as a full-stack web application with React frontend and Express backend, it integrates with Square for payments and DocuSign for legal agreements.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth with OpenID Connect integration\n- **Session Management**: Express sessions with PostgreSQL store\n- **API Design**: RESTful endpoints with proper error handling\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless adapter\n- **Schema Management**: Drizzle migrations in `/migrations` directory\n- **Key Tables**:\n  - `users` - User profiles and admin flags\n  - `appointments` - Booking details with status tracking\n  - `sessions` - Session storage for authentication\n  - `email_logs` - Email delivery tracking\n\n### Authentication & Authorization\n- **Strategy**: Replit Auth with JWT tokens\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **Role-based Access**: Admin flag in user table for administrative features\n- **Route Protection**: Middleware-based authentication checks\n\n### Payment Integration\n- **Provider**: Square Payment API\n- **Implementation**: Square Web SDK for secure card tokenization\n- **Flow**: Frontend tokenization → backend payment processing\n- **Security**: Server-side payment verification with idempotency keys\n\n### Document Management\n- **Provider**: DocuSign eSignature API\n- **Authentication**: JWT-based API access\n- **Workflow**: Automatic envelope creation and sending post-payment\n- **Status Tracking**: Real-time document signing status updates\n\n### Email System\n- **Provider**: Nodemailer with SMTP configuration\n- **Templates**: HTML email templates for confirmations and reminders\n- **Logging**: Email delivery tracking in database\n- **Types**: Confirmation emails, appointment reminders, status updates\n\n## External Dependencies\n\n### Core Services\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Square Payments**: Payment processing and tokenization\n- **DocuSign**: Electronic signature and document workflow\n- **Replit Auth**: Authentication and user management\n\n### Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Type safety across frontend and backend\n- **Drizzle Kit**: Database migration and schema management\n- **ESBuild**: Backend bundling for production deployment\n\n### UI Components\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first styling framework\n- **Lucide React**: Icon library for consistent iconography\n- **React Hook Form**: Form validation and submission\n\n### Backend Libraries\n- **Express**: Web framework for API routes\n- **Passport**: Authentication middleware\n- **Nodemailer**: Email delivery service\n- **Connect PG Simple**: PostgreSQL session store","size_bytes":3746},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.6s ease-in\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3021},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\n\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nconst connectionString = process.env.DATABASE_URL;\n\n// Configure postgres with better error handling and connection pooling\nconst client = postgres(connectionString, {\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n  max: 20,\n  idle_timeout: 30,\n  connect_timeout: 60,\n  max_lifetime: 60 * 30,\n  connection: {\n    application_name: 'guardportal_app',\n  },\n  onnotice: (notice) => {\n    console.log('Database notice:', notice.message);\n  },\n  onparameter: (key, value) => {\n    console.log('Database parameter:', key, value);\n  }\n});\n\n// The postgres client handles errors internally\n// No need for manual error handlers with the postgres package\n\nexport const db = drizzle(client, { schema });","size_bytes":1020},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Add process error handlers\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error.message);\n  // Don't exit the process, just log the error\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  // Don't exit the process, just log the error\n});\n\n// Graceful shutdown handling\nprocess.on('SIGTERM', () => {\n  console.log('SIGTERM received, shutting down gracefully');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('SIGINT received, shutting down gracefully');\n  process.exit(0);\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":2687},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4198},"server/routes.ts":{"content":"\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertAppointmentSchema, updateAppointmentSchema } from \"@shared/schema\";\nimport { squareService } from \"./services/squareService\";\nimport { docusignService } from \"./services/docusignService\";\nimport { emailService } from \"./services/emailService\";\nimport { authService } from \"./services/authService\";\nimport jwt from \"jsonwebtoken\";\n\n// Auth middleware\nconst authenticateToken = async (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  const user = authService.verifyToken(token);\n  if (!user) {\n    return res.status(401).json({ message: \"Invalid or expired token\" });\n  }\n\n  req.user = user;\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      if (!email || !password || !firstName || !lastName) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      if (password.length < 8) {\n        return res.status(400).json({ message: \"Password must be at least 8 characters long\" });\n      }\n\n      const result = await authService.signup({ email, password, firstName, lastName });\n      \n      res.json({ \n        message: \"Account created successfully\",\n        user: result.user,\n        token: result.token\n      });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Signup failed\" \n      });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      const result = await authService.login({ email, password });\n      \n      res.json({ \n        message: \"Login successful\",\n        user: result.user,\n        token: result.token\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(401).json({ \n        message: error instanceof Error ? error.message : \"Login failed\" \n      });\n    }\n  });\n\n  app.post('/api/auth/forgot-password', async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      await authService.forgotPassword(email);\n      \n      res.json({ \n        message: \"If an account with that email exists, a password reset link has been sent\" \n      });\n    } catch (error) {\n      console.error(\"Forgot password error:\", error);\n      res.status(500).json({ message: \"Failed to process forgot password request\" });\n    }\n  });\n\n  app.post('/api/auth/reset-password', async (req, res) => {\n    try {\n      const { token, password } = req.body;\n      \n      if (!token || !password) {\n        return res.status(400).json({ message: \"Token and new password are required\" });\n      }\n\n      if (password.length < 8) {\n        return res.status(400).json({ message: \"Password must be at least 8 characters long\" });\n      }\n\n      await authService.resetPassword(token, password);\n      \n      res.json({ message: \"Password reset successfully\" });\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Password reset failed\" \n      });\n    }\n  });\n\n  app.get('/api/auth/user', authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Remove password from response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Appointment routes\n  app.post('/api/appointments', authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const validatedData = insertAppointmentSchema.parse(req.body);\n      \n      // Create appointment\n      const appointment = await storage.createAppointment({\n        ...validatedData,\n        userId,\n        email: req.user.email || validatedData.email,\n      });\n\n      // Process payment with Square\n      try {\n        const paymentResult = await squareService.processPayment({\n          amount: 22500, // $225.00 in cents\n          currency: 'USD',\n          sourceId: req.body.paymentSourceId, // From Square payment form\n          appointmentId: appointment.id,\n        });\n\n        // Update appointment with payment info\n        await storage.updateAppointment(appointment.id, {\n          paymentStatus: 'paid',\n          paymentId: paymentResult.paymentId,\n          status: 'confirmed',\n        });\n\n        // Try to send DocuSign agreement (non-blocking)\n        try {\n          const docusignResult = await docusignService.sendAgreement({\n            recipientEmail: appointment.email,\n            recipientName: appointment.fullName,\n            appointmentId: appointment.id,\n          });\n\n          // Update appointment with DocuSign info\n          await storage.updateAppointment(appointment.id, {\n            docusignStatus: 'sent',\n            docusignEnvelopeId: docusignResult.envelopeId,\n          });\n        } catch (docusignError) {\n          console.error('DocuSign error (non-blocking):', docusignError);\n          // Continue with appointment creation even if DocuSign fails\n        }\n\n        // Try to send confirmation email (non-blocking)\n        try {\n          await emailService.sendConfirmationEmail(appointment);\n          await storage.logEmail({\n            appointmentId: appointment.id,\n            emailType: 'confirmation',\n            sentTo: appointment.email,\n          });\n\n          // Schedule reminder email (24 hours before)\n          await emailService.scheduleReminderEmail(appointment);\n        } catch (emailError) {\n          console.error('Email error (non-blocking):', emailError);\n          // Continue with appointment creation even if email fails\n        }\n\n        res.json({ \n          success: true, \n          appointment: await storage.getAppointment(appointment.id),\n          message: 'Appointment booked successfully!' \n        });\n\n      } catch (paymentError) {\n        // Update appointment with payment failure\n        await storage.updateAppointment(appointment.id, {\n          paymentStatus: 'failed',\n        });\n        \n        console.error('Payment processing failed:', paymentError);\n        res.status(400).json({ \n          message: 'Payment processing failed. Please try again.' \n        });\n      }\n\n    } catch (error) {\n      console.error('Error creating appointment:', error);\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : 'Invalid appointment data' \n      });\n    }\n  });\n\n  app.get('/api/appointments/my', authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const appointments = await storage.getUserAppointments(userId);\n      res.json(appointments);\n    } catch (error) {\n      console.error('Error fetching user appointments:', error);\n      res.status(500).json({ message: 'Failed to fetch appointments' });\n    }\n  });\n\n  app.get('/api/appointments/:id', authenticateToken, async (req: any, res) => {\n    try {\n      const appointment = await storage.getAppointment(req.params.id);\n      if (!appointment) {\n        return res.status(404).json({ message: 'Appointment not found' });\n      }\n\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      // Check if user owns the appointment or is admin\n      if (appointment.userId !== userId && !user?.isAdmin) {\n        return res.status(403).json({ message: 'Unauthorized' });\n      }\n\n      res.json(appointment);\n    } catch (error) {\n      console.error('Error fetching appointment:', error);\n      res.status(500).json({ message: 'Failed to fetch appointment' });\n    }\n  });\n\n  app.patch('/api/appointments/:id', authenticateToken, async (req: any, res) => {\n    try {\n      const appointment = await storage.getAppointment(req.params.id);\n      if (!appointment) {\n        return res.status(404).json({ message: 'Appointment not found' });\n      }\n\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      // Check if user owns the appointment or is admin\n      if (appointment.userId !== userId && !user?.isAdmin) {\n        return res.status(403).json({ message: 'Unauthorized' });\n      }\n\n      const validatedData = updateAppointmentSchema.parse(req.body);\n      const updatedAppointment = await storage.updateAppointment(req.params.id, validatedData);\n      \n      res.json(updatedAppointment);\n    } catch (error) {\n      console.error('Error updating appointment:', error);\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : 'Invalid update data' \n      });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/appointments', authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const status = req.query.status as string;\n      const appointments = status \n        ? await storage.getAppointmentsByStatus(status)\n        : await storage.getAllAppointments();\n      \n      res.json(appointments);\n    } catch (error) {\n      console.error('Error fetching admin appointments:', error);\n      res.status(500).json({ message: 'Failed to fetch appointments' });\n    }\n  });\n\n  app.get('/api/admin/stats', authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const stats = await storage.getAppointmentStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching admin stats:', error);\n      res.status(500).json({ message: 'Failed to fetch stats' });\n    }\n  });\n\n  // Payment processing route\n  app.post('/api/payment/process', authenticateToken, async (req: any, res) => {\n    try {\n      const { sourceId, amount, appointmentId } = req.body;\n      \n      if (!sourceId || !amount) {\n        return res.status(400).json({ message: 'Missing payment information' });\n      }\n\n      const paymentResult = await squareService.processPayment({\n        amount: amount,\n        currency: 'USD',\n        sourceId: sourceId,\n        appointmentId: appointmentId || `temp-${Date.now()}`,\n      });\n\n      res.json({\n        success: true,\n        paymentId: paymentResult.paymentId,\n        status: paymentResult.status,\n        amount: paymentResult.amount\n      });\n\n    } catch (error) {\n      console.error('Payment processing error:', error);\n      res.status(400).json({\n        message: error instanceof Error ? error.message : 'Payment processing failed'\n      });\n    }\n  });\n\n  // DocuSign webhook for status updates\n  app.post('/api/docusign/webhook', async (req, res) => {\n    try {\n      const { envelopeId, status } = req.body;\n      \n      // Find appointment by envelope ID and update DocuSign status\n      const appointments = await storage.getAllAppointments();\n      const appointment = appointments.find(a => a.docusignEnvelopeId === envelopeId);\n      \n      if (appointment) {\n        const docusignStatus = status === 'completed' ? 'signed' : \n                               status === 'declined' ? 'declined' : 'sent';\n        \n        await storage.updateAppointment(appointment.id, {\n          docusignStatus: docusignStatus as any,\n        });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('DocuSign webhook error:', error);\n      res.status(500).json({ message: 'Webhook processing failed' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12611},"server/storage.ts":{"content":"import {\n  users,\n  appointments,\n  emailLogs,\n  passwordResetTokens, // Import passwordResetTokens\n  type User,\n  type UpsertUser,\n  type Appointment,\n  type InsertAppointment,\n  type UpdateAppointment,\n  type EmailLog,\n  type PasswordResetToken, // Import PasswordResetToken type\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\nimport { generateId } from \"@shared/utils\"; // Assuming generateId is in @shared/utils\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(user: Omit<User, 'id'>): Promise<User>; // Added for custom auth\n  getUserByEmail(email: string): Promise<User | null>; // Added for custom auth\n  updateUserPassword(userId: string, hashedPassword: string): Promise<void>; // Added for custom auth\n  savePasswordResetToken(userId: string, token: string, expiresAt: Date): Promise<void>; // Added for custom auth\n  getPasswordResetToken(token: string): Promise<PasswordResetToken | null>; // Added for custom auth\n  deletePasswordResetToken(token: string): Promise<void>; // Added for custom auth\n\n\n  // Appointment operations\n  createAppointment(appointment: InsertAppointment & { userId: string }): Promise<Appointment>;\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  updateAppointment(id: string, updates: UpdateAppointment): Promise<Appointment>;\n  getUserAppointments(userId: string): Promise<Appointment[]>;\n  getAllAppointments(): Promise<Appointment[]>;\n  getAppointmentsByStatus(status: string): Promise<Appointment[]>;\n\n  // Email logging\n  logEmail(log: { appointmentId?: string; emailType: string; sentTo: string; status?: string }): Promise<EmailLog>;\n\n  // Admin operations\n  getAppointmentStats(): Promise<{\n    total: number;\n    pending: number;\n    confirmed: number;\n    completed: number;\n    revenue: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  // Original upsertUser, kept for compatibility if needed, but createUser is preferred for new users.\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.email,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Added for custom authentication: Create a new user\n  async createUser(user: Omit<User, 'id'>): Promise<User> {\n    const result = await db\n      .insert(users)\n      .values({\n        id: generateId(),\n        ...user,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n\n    return result[0];\n  }\n\n  // Added for custom authentication: Get user by email\n  async getUserByEmail(email: string): Promise<User | null> {\n    const result = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  // Added for custom authentication: Update user's password\n  async updateUserPassword(userId: string, hashedPassword: string): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        password: hashedPassword,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Added for custom authentication: Save password reset token\n  async savePasswordResetToken(userId: string, token: string, expiresAt: Date): Promise<void> {\n    await db\n      .insert(passwordResetTokens)\n      .values({\n        id: generateId(),\n        userId,\n        token,\n        expiresAt,\n        createdAt: new Date(),\n      })\n      .execute(); // Use .execute() for operations that don't return rows\n  }\n\n  // Added for custom authentication: Get password reset token\n  async getPasswordResetToken(token: string): Promise<PasswordResetToken | null> {\n    const result = await db\n      .select()\n      .from(passwordResetTokens)\n      .where(eq(passwordResetTokens.token, token))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  // Added for custom authentication: Delete password reset token\n  async deletePasswordResetToken(token: string): Promise<void> {\n    await db\n      .delete(passwordResetTokens)\n      .where(eq(passwordResetTokens.token, token))\n      .execute(); // Use .execute() for operations that don't return rows\n  }\n\n  // Appointment operations\n  async createAppointment(appointmentData: InsertAppointment & { userId: string }): Promise<Appointment> {\n    const [appointment] = await db\n      .insert(appointments)\n      .values(appointmentData)\n      .returning();\n    return appointment;\n  }\n\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    const [appointment] = await db\n      .select()\n      .from(appointments)\n      .where(eq(appointments.id, id));\n    return appointment;\n  }\n\n  async updateAppointment(id: string, updates: UpdateAppointment): Promise<Appointment> {\n    const [appointment] = await db\n      .update(appointments)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(appointments.id, id))\n      .returning();\n    return appointment;\n  }\n\n  async getUserAppointments(userId: string): Promise<Appointment[]> {\n    return await db\n      .select()\n      .from(appointments)\n      .where(eq(appointments.userId, userId))\n      .orderBy(desc(appointments.createdAt));\n  }\n\n  async getAllAppointments(): Promise<Appointment[]> {\n    return await db\n      .select()\n      .from(appointments)\n      .orderBy(desc(appointments.createdAt));\n  }\n\n  async getAppointmentsByStatus(status: string): Promise<Appointment[]> {\n    return await db\n      .select()\n      .from(appointments)\n      .where(eq(appointments.status, status as any))\n      .orderBy(desc(appointments.createdAt));\n  }\n\n  // Email logging\n  async logEmail(logData: { appointmentId?: string; emailType: string; sentTo: string; status?: string }): Promise<EmailLog> {\n    const [log] = await db\n      .insert(emailLogs)\n      .values(logData)\n      .returning();\n    return log;\n  }\n\n  // Admin operations\n  async getAppointmentStats(): Promise<{\n    total: number;\n    pending: number;\n    confirmed: number;\n    completed: number;\n    revenue: number;\n  }> {\n    const allAppointments = await db.select().from(appointments);\n\n    const stats = {\n      total: allAppointments.length,\n      pending: allAppointments.filter(a => a.status === 'pending').length,\n      confirmed: allAppointments.filter(a => a.status === 'confirmed').length,\n      completed: allAppointments.filter(a => a.status === 'completed').length,\n      revenue: allAppointments\n        .filter(a => a.paymentStatus === 'paid')\n        .reduce((sum, a) => sum + parseFloat(a.paymentAmount || '0'), 0)\n    };\n\n    return stats;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":7032},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  password: varchar(\"password\"), // Added for custom auth\n  isAdmin: boolean(\"is_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const appointmentStatusEnum = pgEnum('appointment_status', ['pending', 'confirmed', 'completed', 'cancelled']);\nexport const paymentStatusEnum = pgEnum('payment_status', ['pending', 'paid', 'failed', 'refunded']);\nexport const docusignStatusEnum = pgEnum('docusign_status', ['not_sent', 'sent', 'signed', 'declined']);\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  fullName: varchar(\"full_name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  preferredDate: timestamp(\"preferred_date\").notNull(),\n  preferredTime: varchar(\"preferred_time\"),\n  status: appointmentStatusEnum(\"status\").default('pending'),\n  paymentStatus: paymentStatusEnum(\"payment_status\").default('pending'),\n  paymentAmount: decimal(\"payment_amount\", { precision: 10, scale: 2 }).default('225.00'),\n  paymentId: varchar(\"payment_id\"),\n  docusignStatus: docusignStatusEnum(\"docusign_status\").default('not_sent'),\n  docusignEnvelopeId: varchar(\"docusign_envelope_id\"),\n  isReady: boolean(\"is_ready\").default(false),\n  titleProtectionAddon: boolean(\"title_protection_addon\").default(false),\n  reminderSent: boolean(\"reminder_sent\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const emailLogs = pgTable(\"email_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id),\n  emailType: varchar(\"email_type\").notNull(), // 'confirmation', 'reminder', 'docusign'\n  sentTo: varchar(\"sent_to\").notNull(),\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  status: varchar(\"status\").default('sent'), // 'sent', 'failed'\n});\n\nexport const passwordResetTokens = pgTable(\"password_reset_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  token: varchar(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).extend({\n  fullName: z.string().min(2, \"Full name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().min(10, \"Valid phone number is required\"),\n  address: z.string().min(5, \"Complete address is required\"),\n  preferredDate: z.string().or(z.date()).transform((val) => {\n    if (typeof val === 'string') {\n      return new Date(val);\n    }\n    return val;\n  }),\n  preferredTime: z.string().optional(),\n  isReady: z.boolean().refine(val => val === true, \"You must confirm readiness to proceed\"),\n}).pick({\n  fullName: true,\n  email: true,\n  phone: true,\n  address: true,\n  preferredDate: true,\n  preferredTime: true,\n  isReady: true,\n});\n\nexport const updateAppointmentSchema = createInsertSchema(appointments).partial();\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type UpdateAppointment = z.infer<typeof updateAppointmentSchema>;\nexport type EmailLog = typeof emailLogs.$inferSelect;\nexport type PasswordResetToken = typeof passwordResetTokens.$inferSelect;","size_bytes":4735},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport UserDashboard from \"@/pages/user-dashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport ForgotPassword from \"@/pages/forgot-password\";\nimport ResetPassword from \"@/pages/reset-password\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  return (\n    <Switch>\n      {/* Main landing page */}\n      <Route path=\"/\" component={Landing} />\n      \n      {/* Public routes - available without authentication */}\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/forgot-password\" component={ForgotPassword} />\n      <Route path=\"/reset-password\" component={ResetPassword} />\n\n      {/* User home/dashboard - requires authentication */}\n      <Route path=\"/home\">\n        {isLoading ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            Loading...\n          </div>\n        ) : !isAuthenticated ? (\n          <Login />\n        ) : (\n          <Home />\n        )}\n      </Route>\n\n      {/* Protected dashboard route - requires authentication */}\n      <Route path=\"/dashboard\">\n        {isLoading ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            Loading...\n          </div>\n        ) : !isAuthenticated ? (\n          <Login />\n        ) : user?.isAdmin ? (\n          <AdminDashboard />\n        ) : (\n          <UserDashboard />\n        )}\n      </Route>\n\n      {/* Admin route */}\n      <Route path=\"/admin\">\n        {isLoading ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            Loading...\n          </div>\n        ) : !isAuthenticated ? (\n          <Login />\n        ) : (\n          <AdminDashboard />\n        )}\n      </Route>\n\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2527},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(60, 9%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(20, 91%, 48%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(20, 91%, 48%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 5%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(158, 64%, 52%);\n  --sidebar-accent-foreground: hsl(222, 84%, 5%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(20, 91%, 48%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(224, 71%, 4%);\n  --sidebar: hsl(222, 84%, 5%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(158, 64%, 52%);\n  --sidebar-accent-foreground: hsl(222, 84%, 5%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', 'Open Sans', sans-serif;\n  }\n}\n\n@layer components {\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(221, 83%, 53%) 0%, hsl(158, 64%, 52%) 50%, hsl(20, 91%, 48%) 100%);\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .hero-gradient::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" patternUnits=\"userSpaceOnUse\" width=\"100\" height=\"100\"><circle cx=\"25\" cy=\"25\" r=\"1\" fill=\"%23ffffff\" opacity=\"0.1\"/><circle cx=\"75\" cy=\"75\" r=\"1\" fill=\"%23ffffff\" opacity=\"0.1\"/><circle cx=\"50\" cy=\"10\" r=\"0.5\" fill=\"%23ffffff\" opacity=\"0.1\"/><circle cx=\"10\" cy=\"60\" r=\"0.5\" fill=\"%23ffffff\" opacity=\"0.1\"/><circle cx=\"90\" cy=\"30\" r=\"0.5\" fill=\"%23ffffff\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>') repeat;\n    pointer-events: none;\n  }\n  \n  .glass-effect {\n    backdrop-filter: blur(16px);\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .feature-card {\n    position: relative;\n    overflow: hidden;\n    transition: all 0.3s ease;\n    border: 1px solid hsl(var(--border));\n  }\n  \n  .feature-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n    transition: left 0.5s ease;\n  }\n  \n  .feature-card:hover::before {\n    left: 100%;\n  }\n  \n  .feature-card:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n    border-color: hsl(var(--primary));\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.8s ease-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.6s ease-out;\n  }\n  \n  .animate-bounce-in {\n    animation: bounceIn 0.8s ease-out;\n  }\n  \n  .step-number {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)));\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);\n    position: relative;\n  }\n  \n  .step-number::before {\n    content: '';\n    position: absolute;\n    top: -2px;\n    left: -2px;\n    right: -2px;\n    bottom: -2px;\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)));\n    border-radius: inherit;\n    z-index: -1;\n    filter: blur(8px);\n    opacity: 0.7;\n  }\n  \n  .banner-animation {\n    background: linear-gradient(-45deg, #667eea, #764ba2, #f093fb, #f5576c);\n    background-size: 400% 400%;\n    animation: gradientShift 15s ease infinite;\n  }\n  \n  .floating-element {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .pulse-glow {\n    animation: pulseGlow 2s ease-in-out infinite alternate;\n  }\n  \n  .nav-glass {\n    backdrop-filter: blur(20px);\n    background: rgba(255, 255, 255, 0.85);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n    box-shadow: 0 4px 32px rgba(0, 0, 0, 0.1);\n  }\n  \n  .dark .nav-glass {\n    background: rgba(34, 34, 34, 0.85);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(30px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(50px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(0.3) translateY(50px);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(1.05) translateY(-10px);\n  }\n  70% {\n    transform: scale(0.95) translateY(0);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1) translateY(0);\n  }\n}\n\n@keyframes gradientShift {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n@keyframes pulseGlow {\n  from {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.4);\n  }\n  to {\n    box-shadow: 0 0 30px rgba(59, 130, 246, 0.8), 0 0 40px rgba(59, 130, 246, 0.4);\n  }\n}\n\n@media (max-width: 768px) {\n  .feature-card:hover {\n    transform: none;\n    box-shadow: none;\n  }\n  \n  .hero-gradient {\n    background: linear-gradient(180deg, hsl(221, 83%, 53%) 0%, hsl(158, 64%, 52%) 100%);\n  }\n}\n","size_bytes":6960},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/docusignService.ts":{"content":"import docusign from 'docusign-esign';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ninterface AgreementRequest {\n  recipientEmail: string;\n  recipientName: string;\n  appointmentId: string;\n}\n\ninterface AgreementResult {\n  envelopeId: string;\n  status: string;\n}\n\nclass DocusignService {\n  private apiClient: docusign.ApiClient;\n  private accountId: string;\n  private integrationKey: string;\n  private userId: string;\n  private privateKey: string;\n  private basePath: string;\n\n  constructor() {\n    this.accountId = process.env.DOCUSIGN_ACCOUNT_ID || '';\n    this.integrationKey = process.env.DOCUSIGN_INTEGRATION_KEY || '';\n    this.userId = process.env.DOCUSIGN_USER_ID || '';\n    this.privateKey = process.env.DOCUSIGN_PRIVATE_KEY?.replace(/\\\\n/g, '\\n') || '';\n    this.basePath = process.env.NODE_ENV === 'production' \n      ? 'https://na3.docusign.net/restapi'\n      : 'https://demo.docusign.net/restapi';\n\n    this.apiClient = new docusign.ApiClient();\n    this.apiClient.setBasePath(this.basePath);\n\n    if (this.integrationKey && this.userId && this.privateKey) {\n      this.configureJWTAuth().catch(error => {\n        console.error('DocuSign authentication failed:', error.message);\n        console.log('DocuSign features will be disabled');\n      });\n    } else {\n      console.log('DocuSign credentials not configured, DocuSign features will be disabled');\n    }\n  }\n\n  private async configureJWTAuth(): Promise<void> {\n    try {\n      const scopes = ['signature', 'impersonation'];\n\n      const results = await this.apiClient.requestJWTUserToken(\n        this.integrationKey,\n        this.userId,\n        scopes,\n        this.privateKey,\n        3600\n      );\n\n      if (results && results.body && results.body.access_token) {\n        this.apiClient.addDefaultHeader('Authorization', `Bearer ${results.body.access_token}`);\n        console.log('DocuSign JWT authentication successful');\n      }\n    } catch (error) {\n      console.error('DocuSign JWT authentication error:', error);\n      throw error;\n    }\n  }\n\n  async sendAgreement(request: AgreementRequest): Promise<AgreementResult> {\n    try {\n      if (!this.integrationKey || !this.userId || !this.privateKey) {\n        throw new Error('DocuSign credentials not configured');\n      }\n\n      const envelopesApi = new docusign.EnvelopesApi(this.apiClient);\n\n      // Create the envelope definition\n      const envelopeDefinition = new docusign.EnvelopeDefinition();\n      envelopeDefinition.emailSubject = 'GuardPortal Asset Protection Agreement - Please Sign';\n      envelopeDefinition.status = 'sent';\n\n      // Create document\n      const document1 = new docusign.Document();\n      document1.documentBase64 = this.getAgreementDocumentBase64();\n      document1.name = 'Asset Protection Agreement';\n      document1.fileExtension = 'pdf';\n      document1.documentId = '1';\n\n      envelopeDefinition.documents = [document1];\n\n      // Create recipient\n      const signer1 = new docusign.Signer();\n      signer1.email = request.recipientEmail;\n      signer1.name = request.recipientName;\n      signer1.recipientId = '1';\n      signer1.routingOrder = '1';\n\n      // Create signature tab\n      const signHere1 = new docusign.SignHere();\n      signHere1.documentId = '1';\n      signHere1.pageNumber = '1';\n      signHere1.recipientId = '1';\n      signHere1.tabLabel = 'SignHereTab';\n      signHere1.xPosition = '195';\n      signHere1.yPosition = '147';\n\n      const signHereTabs = [signHere1];\n      signer1.tabs = new docusign.Tabs();\n      signer1.tabs.signHereTabs = signHereTabs;\n\n      const recipients = new docusign.Recipients();\n      recipients.signers = [signer1];\n      envelopeDefinition.recipients = recipients;\n\n      // Create the envelope\n      const results = await envelopesApi.createEnvelope(this.accountId, {\n        envelopeDefinition: envelopeDefinition\n      });\n\n      if (results && results.envelopeId) {\n        return {\n          envelopeId: results.envelopeId,\n          status: results.status || 'sent'\n        };\n      } else {\n        throw new Error('Failed to create DocuSign envelope');\n      }\n    } catch (error) {\n      console.error('DocuSign error:', error);\n      throw new Error(`DocuSign agreement sending failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private getAgreementDocumentBase64(): string {\n    // This is a placeholder - you would replace this with your actual PDF document\n    // For now, we'll create a simple text document\n    const agreementText = `\nASSET PROTECTION AGREEMENT\n\nThis agreement is between GuardPortal and the client for asset protection services.\n\nClient agrees to the terms and conditions outlined in this document.\n\nSignature: _____________________\n\nDate: _____________________\n    `;\n\n    return Buffer.from(agreementText).toString('base64');\n  }\n\n  async getEnvelopeStatus(envelopeId: string): Promise<any> {\n    try {\n      const envelopesApi = new docusign.EnvelopesApi(this.apiClient);\n      const results = await envelopesApi.getEnvelope(this.accountId, envelopeId);\n      return results;\n    } catch (error) {\n      console.error('DocuSign get envelope status error:', error);\n      throw new Error(`Failed to get envelope status: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\nexport const docusignService = new DocusignService();","size_bytes":5351},"server/services/emailService.ts":{"content":"import nodemailer from 'nodemailer';\nimport type { Appointment } from '@shared/schema';\n\nclass EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor() {\n    this.transporter = nodemailer.createTransport({\n      host: process.env.SMTP_HOST || 'smtp.gmail.com',\n      port: parseInt(process.env.SMTP_PORT || '587'),\n      secure: false,\n      auth: {\n        user: process.env.SMTP_USER || process.env.EMAIL_USER,\n        pass: process.env.SMTP_PASS || process.env.EMAIL_PASS,\n      },\n    });\n  }\n\n  async sendConfirmationEmail(appointment: Appointment): Promise<void> {\n    const mailOptions = {\n      from: process.env.FROM_EMAIL || 'noreply@guardportal.com',\n      to: appointment.email,\n      subject: 'Appointment Confirmed - GuardPortal Security Audit',\n      html: `\n        <div style=\"font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #3B82F6; margin: 0;\">🛡️ GuardPortal</h1>\n            <h2 style=\"color: #1F2937; margin: 10px 0;\">Appointment Confirmed!</h2>\n          </div>\n          \n          <div style=\"background: #F9FAFB; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\n            <h3 style=\"color: #1F2937; margin-top: 0;\">Appointment Details:</h3>\n            <p><strong>Service ID:</strong> ${appointment.id}</p>\n            <p><strong>Date:</strong> ${new Date(appointment.preferredDate).toLocaleDateString()}</p>\n            <p><strong>Time:</strong> ${appointment.preferredTime || 'To be confirmed'}</p>\n            <p><strong>Address:</strong> ${appointment.address}</p>\n            <p><strong>Amount Paid:</strong> $${appointment.paymentAmount}</p>\n          </div>\n          \n          <div style=\"background: #EEF2FF; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\n            <h3 style=\"color: #1F2937; margin-top: 0;\">📋 Preparation Checklist:</h3>\n            <ul style=\"margin: 0; padding-left: 20px;\">\n              <li>Property deed and title documents</li>\n              <li>Recent property tax statements</li>\n              <li>Insurance documents and receipts</li>\n              <li>Warranty papers for valuable items</li>\n              <li>List of high-value assets</li>\n            </ul>\n          </div>\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <p style=\"color: #6B7280;\">A DocuSign agreement has been sent to your email for electronic signature.</p>\n            <p style=\"color: #6B7280;\">You'll receive a reminder 24 hours before your appointment.</p>\n          </div>\n          \n          <div style=\"text-align: center; background: #F3F4F6; padding: 15px; border-radius: 8px;\">\n            <p style=\"margin: 0; color: #4B5563;\">Questions? Contact us at support@guardportal.com or (555) 123-4567</p>\n          </div>\n        </div>\n      `,\n    };\n\n    await this.transporter.sendMail(mailOptions);\n  }\n\n  async sendReminderEmail(appointment: Appointment): Promise<void> {\n    const mailOptions = {\n      from: process.env.FROM_EMAIL || 'noreply@guardportal.com',\n      to: appointment.email,\n      subject: 'Reminder: Your Security Audit Tomorrow - GuardPortal',\n      html: `\n        <div style=\"font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #3B82F6; margin: 0;\">🛡️ GuardPortal</h1>\n            <h2 style=\"color: #1F2937; margin: 10px 0;\">Security Audit Reminder</h2>\n          </div>\n          \n          <div style=\"background: #FEF3C7; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #F59E0B;\">\n            <h3 style=\"color: #92400E; margin-top: 0;\">⏰ Your appointment is tomorrow!</h3>\n            <p style=\"color: #92400E; margin: 0;\">Don't forget about your scheduled security audit.</p>\n          </div>\n          \n          <div style=\"background: #F9FAFB; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\n            <h3 style=\"color: #1F2937; margin-top: 0;\">Appointment Details:</h3>\n            <p><strong>Date:</strong> ${new Date(appointment.preferredDate).toLocaleDateString()}</p>\n            <p><strong>Time:</strong> ${appointment.preferredTime || 'To be confirmed'}</p>\n            <p><strong>Address:</strong> ${appointment.address}</p>\n            <p><strong>Service ID:</strong> ${appointment.id}</p>\n          </div>\n          \n          <div style=\"background: #EEF2FF; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\n            <h3 style=\"color: #1F2937; margin-top: 0;\">📋 Please Have Ready:</h3>\n            <ul style=\"margin: 0; padding-left: 20px;\">\n              <li>Property deed and title documents</li>\n              <li>Recent property tax statements</li>\n              <li>Insurance documents and receipts</li>\n              <li>Warranty papers for valuable items</li>\n              <li>List of high-value assets</li>\n            </ul>\n          </div>\n          \n          <div style=\"text-align: center; background: #F3F4F6; padding: 15px; border-radius: 8px;\">\n            <p style=\"margin: 0; color: #4B5563;\">Need to reschedule? Contact us at support@guardportal.com or (555) 123-4567</p>\n          </div>\n        </div>\n      `,\n    };\n\n    await this.transporter.sendMail(mailOptions);\n  }\n\n  async scheduleReminderEmail(appointment: Appointment): Promise<void> {\n    // Calculate 24 hours before appointment\n    const appointmentDate = new Date(appointment.preferredDate);\n    const reminderDate = new Date(appointmentDate.getTime() - 24 * 60 * 60 * 1000);\n    \n    // In a production environment, you would use a job queue like Bull or Agenda\n    // For now, we'll use a simple setTimeout (not recommended for production)\n    const delay = reminderDate.getTime() - Date.now();\n    \n    if (delay > 0) {\n      setTimeout(async () => {\n        try {\n          await this.sendReminderEmail(appointment);\n          // Mark reminder as sent in database\n          // await storage.updateAppointment(appointment.id, { reminderSent: true });\n        } catch (error) {\n          console.error('Failed to send reminder email:', error);\n        }\n      }, delay);\n    }\n  }\n\n  async sendWelcomeEmail(user: any): Promise<void> {\n    const mailOptions = {\n      from: process.env.FROM_EMAIL || 'noreply@guardportal.com',\n      to: user.email,\n      subject: 'Welcome to GuardPortal - Your Security Journey Begins!',\n      html: `\n        <div style=\"font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; overflow: hidden;\">\n          <!-- Header -->\n          <div style=\"background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); padding: 40px 30px; text-align: center; border-bottom: 1px solid rgba(255,255,255,0.2);\">\n            <div style=\"background: rgba(255,255,255,0.15); width: 80px; height: 80px; border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;\">\n              <span style=\"font-size: 36px;\">🛡️</span>\n            </div>\n            <h1 style=\"color: white; margin: 0; font-size: 32px; font-weight: 700; text-shadow: 0 2px 10px rgba(0,0,0,0.3);\">Welcome to GuardPortal</h1>\n            <p style=\"color: rgba(255,255,255,0.9); margin: 10px 0 0; font-size: 18px;\">Your property protection starts now</p>\n          </div>\n          \n          <!-- Content -->\n          <div style=\"background: white; padding: 40px 30px;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n              <h2 style=\"color: #2D3748; margin: 0 0 15px; font-size: 24px;\">Hello ${user.firstName}! 👋</h2>\n              <p style=\"color: #4A5568; font-size: 16px; line-height: 1.6; margin: 0;\">\n                Thank you for choosing GuardPortal to protect your most valuable assets. We're excited to have you on board!\n              </p>\n            </div>\n            \n            <!-- Feature Cards -->\n            <div style=\"margin: 30px 0;\">\n              <div style=\"background: linear-gradient(135deg, #EBF8FF 0%, #E6FFFA 100%); padding: 20px; border-radius: 12px; margin-bottom: 15px; border-left: 4px solid #3182CE;\">\n                <h3 style=\"color: #2D3748; margin: 0 0 8px; font-size: 16px; display: flex; align-items: center;\">\n                  <span style=\"margin-right: 8px;\">🔒</span> Title Fraud Protection\n                </h3>\n                <p style=\"color: #4A5568; margin: 0; font-size: 14px;\">24/7 monitoring of your property records</p>\n              </div>\n              \n              <div style=\"background: linear-gradient(135deg, #F0FFF4 0%, #F0F9FF 100%); padding: 20px; border-radius: 12px; margin-bottom: 15px; border-left: 4px solid #38A169;\">\n                <h3 style=\"color: #2D3748; margin: 0 0 8px; font-size: 16px; display: flex; align-items: center;\">\n                  <span style=\"margin-right: 8px;\">📋</span> Asset Monitoring\n                </h3>\n                <p style=\"color: #4A5568; margin: 0; font-size: 14px;\">Continuous surveillance and instant alerts</p>\n              </div>\n              \n              <div style=\"background: linear-gradient(135deg, #FFFAF0 0%, #FEF5E7 100%); padding: 20px; border-radius: 12px; border-left: 4px solid #DD6B20;\">\n                <h3 style=\"color: #2D3748; margin: 0 0 8px; font-size: 16px; display: flex; align-items: center;\">\n                  <span style=\"margin-right: 8px;\">🤝</span> Expert Support\n                </h3>\n                <p style=\"color: #4A5568; margin: 0; font-size: 14px;\">Dedicated specialists available 24/7</p>\n              </div>\n            </div>\n            \n            <!-- CTA Button -->\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${process.env.CLIENT_URL || 'https://guardportal.com'}\" style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: 600; display: inline-block; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4); transition: all 0.3s ease;\">\n                Get Started Now\n              </a>\n            </div>\n          </div>\n          \n          <!-- Footer -->\n          <div style=\"background: #F7FAFC; padding: 25px 30px; text-align: center; border-top: 1px solid #E2E8F0;\">\n            <p style=\"color: #718096; margin: 0 0 10px; font-size: 14px;\">\n              Questions? We're here to help at \n              <a href=\"mailto:support@guardportal.com\" style=\"color: #3182CE; text-decoration: none;\">support@guardportal.com</a>\n            </p>\n            <p style=\"color: #A0AEC0; margin: 0; font-size: 12px;\">\n              © 2024 GuardPortal. All rights reserved.\n            </p>\n          </div>\n        </div>\n      `,\n    };\n\n    await this.transporter.sendMail(mailOptions);\n  }\n\n  async sendPasswordResetEmail(user: any, resetToken: string): Promise<void> {\n    const resetUrl = `${process.env.CLIENT_URL || 'http://localhost:5000'}/reset-password?token=${resetToken}`;\n    \n    const mailOptions = {\n      from: process.env.FROM_EMAIL || 'noreply@guardportal.com',\n      to: user.email,\n      subject: 'Reset Your GuardPortal Password',\n      html: `\n        <div style=\"font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; background: white; border-radius: 20px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.1);\">\n          <!-- Header -->\n          <div style=\"background: linear-gradient(135deg, #FF6B6B 0%, #4ECDC4 100%); padding: 40px 30px; text-align: center;\">\n            <div style=\"background: rgba(255,255,255,0.2); width: 80px; height: 80px; border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;\">\n              <span style=\"font-size: 36px;\">🔑</span>\n            </div>\n            <h1 style=\"color: white; margin: 0; font-size: 28px; font-weight: 700; text-shadow: 0 2px 10px rgba(0,0,0,0.3);\">Password Reset</h1>\n            <p style=\"color: rgba(255,255,255,0.9); margin: 10px 0 0; font-size: 16px;\">We received a request to reset your password</p>\n          </div>\n          \n          <!-- Content -->\n          <div style=\"padding: 40px 30px;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n              <h2 style=\"color: #2D3748; margin: 0 0 15px; font-size: 22px;\">Hello ${user.firstName},</h2>\n              <p style=\"color: #4A5568; font-size: 16px; line-height: 1.6; margin: 0 0 20px;\">\n                Someone requested a password reset for your GuardPortal account. If this was you, click the button below to reset your password.\n              </p>\n            </div>\n            \n            <!-- Security Notice -->\n            <div style=\"background: linear-gradient(135deg, #FFF5F5 0%, #FFFAF0 100%); padding: 20px; border-radius: 12px; margin: 25px 0; border-left: 4px solid #F56565;\">\n              <div style=\"display: flex; align-items: flex-start;\">\n                <span style=\"font-size: 20px; margin-right: 12px;\">⚠️</span>\n                <div>\n                  <h3 style=\"color: #C53030; margin: 0 0 8px; font-size: 16px;\">Security Notice</h3>\n                  <p style=\"color: #744210; margin: 0; font-size: 14px; line-height: 1.5;\">\n                    This link will expire in 1 hour for your security. If you didn't request this reset, please ignore this email.\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <!-- CTA Button -->\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${resetUrl}\" style=\"background: linear-gradient(135deg, #FF6B6B 0%, #4ECDC4 100%); color: white; padding: 15px 35px; text-decoration: none; border-radius: 25px; font-weight: 600; display: inline-block; box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4); transition: all 0.3s ease; font-size: 16px;\">\n                Reset My Password\n              </a>\n            </div>\n            \n            <div style=\"text-align: center; margin-top: 25px;\">\n              <p style=\"color: #718096; font-size: 14px; margin: 0;\">\n                Or copy and paste this link: <br>\n                <a href=\"${resetUrl}\" style=\"color: #3182CE; word-break: break-all; font-size: 12px;\">${resetUrl}</a>\n              </p>\n            </div>\n          </div>\n          \n          <!-- Footer -->\n          <div style=\"background: #F7FAFC; padding: 25px 30px; text-align: center; border-top: 1px solid #E2E8F0;\">\n            <p style=\"color: #718096; margin: 0 0 10px; font-size: 14px;\">\n              Need help? Contact us at \n              <a href=\"mailto:support@guardportal.com\" style=\"color: #3182CE; text-decoration: none;\">support@guardportal.com</a>\n            </p>\n            <p style=\"color: #A0AEC0; margin: 0; font-size: 12px;\">\n              © 2024 GuardPortal. All rights reserved.\n            </p>\n          </div>\n        </div>\n      `,\n    };\n\n    await this.transporter.sendMail(mailOptions);\n  }\n\n  async sendPasswordChangedEmail(user: any): Promise<void> {\n    const mailOptions = {\n      from: process.env.FROM_EMAIL || 'noreply@guardportal.com',\n      to: user.email,\n      subject: 'Your GuardPortal Password Has Been Changed',\n      html: `\n        <div style=\"font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; background: white; border-radius: 20px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.1);\">\n          <!-- Header -->\n          <div style=\"background: linear-gradient(135deg, #48BB78 0%, #38A169 100%); padding: 40px 30px; text-align: center;\">\n            <div style=\"background: rgba(255,255,255,0.2); width: 80px; height: 80px; border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;\">\n              <span style=\"font-size: 36px;\">✅</span>\n            </div>\n            <h1 style=\"color: white; margin: 0; font-size: 28px; font-weight: 700; text-shadow: 0 2px 10px rgba(0,0,0,0.3);\">Password Updated</h1>\n            <p style=\"color: rgba(255,255,255,0.9); margin: 10px 0 0; font-size: 16px;\">Your password has been successfully changed</p>\n          </div>\n          \n          <!-- Content -->\n          <div style=\"padding: 40px 30px;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n              <h2 style=\"color: #2D3748; margin: 0 0 15px; font-size: 22px;\">Hello ${user.firstName},</h2>\n              <p style=\"color: #4A5568; font-size: 16px; line-height: 1.6; margin: 0 0 20px;\">\n                Your GuardPortal account password has been successfully updated. You can now use your new password to access your account.\n              </p>\n            </div>\n            \n            <!-- Security Info -->\n            <div style=\"background: linear-gradient(135deg, #F0FFF4 0%, #E6FFFA 100%); padding: 25px; border-radius: 12px; margin: 25px 0; border-left: 4px solid #48BB78;\">\n              <h3 style=\"color: #2D3748; margin: 0 0 15px; font-size: 18px; display: flex; align-items: center;\">\n                <span style=\"margin-right: 10px;\">🔐</span> Security Tips\n              </h3>\n              <ul style=\"color: #4A5568; margin: 0; padding-left: 20px; font-size: 14px; line-height: 1.6;\">\n                <li style=\"margin-bottom: 8px;\">Use a unique password for your GuardPortal account</li>\n                <li style=\"margin-bottom: 8px;\">Enable two-factor authentication when available</li>\n                <li style=\"margin-bottom: 8px;\">Don't share your password with anyone</li>\n                <li>Log out of shared devices after use</li>\n              </ul>\n            </div>\n            \n            <!-- Suspicious Activity Alert -->\n            <div style=\"background: linear-gradient(135deg, #FFF5F5 0%, #FFFAF0 100%); padding: 20px; border-radius: 12px; margin: 25px 0; border-left: 4px solid #F56565;\">\n              <div style=\"display: flex; align-items: flex-start;\">\n                <span style=\"font-size: 20px; margin-right: 12px;\">🚨</span>\n                <div>\n                  <h3 style=\"color: #C53030; margin: 0 0 8px; font-size: 16px;\">Didn't change your password?</h3>\n                  <p style=\"color: #744210; margin: 0; font-size: 14px; line-height: 1.5;\">\n                    If you didn't make this change, please contact our support team immediately at support@guardportal.com\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <!-- CTA Button -->\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${process.env.CLIENT_URL || 'https://guardportal.com'}/login\" style=\"background: linear-gradient(135deg, #48BB78 0%, #38A169 100%); color: white; padding: 15px 35px; text-decoration: none; border-radius: 25px; font-weight: 600; display: inline-block; box-shadow: 0 4px 15px rgba(72, 187, 120, 0.4); transition: all 0.3s ease; font-size: 16px;\">\n                Login to Your Account\n              </a>\n            </div>\n          </div>\n          \n          <!-- Footer -->\n          <div style=\"background: #F7FAFC; padding: 25px 30px; text-align: center; border-top: 1px solid #E2E8F0;\">\n            <p style=\"color: #718096; margin: 0 0 10px; font-size: 14px;\">\n              Questions about your account security? Contact us at \n              <a href=\"mailto:support@guardportal.com\" style=\"color: #3182CE; text-decoration: none;\">support@guardportal.com</a>\n            </p>\n            <p style=\"color: #A0AEC0; margin: 0; font-size: 12px;\">\n              © 2024 GuardPortal. All rights reserved.\n            </p>\n          </div>\n        </div>\n      `,\n    };\n\n    await this.transporter.sendMail(mailOptions);\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":20015},"server/services/squareService.ts":{"content":"import { SquareClient, SquareEnvironment } from 'square';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface PaymentRequest {\n  amount: number; // in cents\n  currency: string;\n  sourceId: string; // from Square payment form\n  appointmentId: string;\n}\n\ninterface PaymentResult {\n  paymentId: string;\n  status: string;\n  amount: number;\n}\n\nclass SquareService {\n  private client: SquareClient;\n  private locationId: string; // Added for locationId\n\n  constructor() {\n    const accessToken = process.env.SQUARE_ACCESS_TOKEN || process.env.SQUARE_SANDBOX_ACCESS_TOKEN;\n    const environment = process.env.SQUARE_ENVIRONMENT === 'production'\n      ? SquareEnvironment.Production\n      : SquareEnvironment.Sandbox;\n    this.locationId = process.env.SQUARE_LOCATION_ID || process.env.SQUARE_SANDBOX_LOCATION_ID || 'MAIN';\n\n    console.log('Square environment variables:', {\n      hasAccessToken: !!accessToken,\n      environment: environment,\n      locationId: this.locationId\n    });\n\n    if (!accessToken) {\n      console.error('Square access token missing. Using mock mode.');\n      // Don't throw error, allow mock mode\n    }\n\n    try {\n      this.client = new SquareClient({\n        accessToken: accessToken || 'mock_token',\n        environment,\n      });\n\n      console.log(`Square client initialized for ${environment} environment with location: ${this.locationId}`);\n    } catch (error) {\n      console.error('Square client initialization failed:', error);\n      throw error;\n    }\n  }\n\n  async processPayment(request: PaymentRequest): Promise<PaymentResult> {\n    try {\n      // Check if we're in mock mode (no real Square credentials)\n      const accessToken = process.env.SQUARE_ACCESS_TOKEN || process.env.SQUARE_SANDBOX_ACCESS_TOKEN;\n      \n      if (!accessToken || accessToken === 'mock_token') {\n        console.log('Processing mock payment (no Square credentials configured)');\n        // Return mock successful payment\n        return {\n          paymentId: `mock_payment_${Date.now()}`,\n          status: 'COMPLETED',\n          amount: request.amount,\n        };\n      }\n\n      // Get the payments API instance\n      const paymentsApi = this.client.paymentsApi;\n      \n      if (!paymentsApi) {\n        console.log('Square Payments API not available, using mock payment');\n        return {\n          paymentId: `mock_payment_${Date.now()}`,\n          status: 'COMPLETED',\n          amount: request.amount,\n        };\n      }\n\n      const requestBody = {\n        sourceId: request.sourceId,\n        amountMoney: {\n          amount: BigInt(request.amount),\n          currency: request.currency,\n        },\n        idempotencyKey: `${request.appointmentId}-${Date.now()}`,\n        note: `GuardPortal Security Audit - Appointment ${request.appointmentId}`,\n        referenceId: request.appointmentId,\n        locationId: this.locationId,\n      };\n\n      console.log('Processing real Square payment with:', { \n        amount: request.amount, \n        sourceId: request.sourceId?.substring(0, 20) + '...', \n        locationId: this.locationId \n      });\n\n      const response = await paymentsApi.createPayment(requestBody);\n\n      if (response.result.payment) {\n        const payment = response.result.payment;\n        return {\n          paymentId: payment.id || '',\n          status: payment.status || 'UNKNOWN',\n          amount: Number(payment.amountMoney?.amount || 0),\n        };\n      } else {\n        throw new Error('Payment creation failed');\n      }\n    } catch (error) {\n      console.error('Square payment error:', error);\n      \n      // Fall back to mock payment in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Falling back to mock payment due to error');\n        return {\n          paymentId: `mock_payment_${Date.now()}`,\n          status: 'COMPLETED',\n          amount: request.amount,\n        };\n      }\n      \n      throw new Error(`Payment processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async refundPayment(paymentId: string, amount?: number): Promise<any> {\n    try {\n      const refundsApi = this.client.refundsApi; // Corrected to refundsApi\n\n      const requestBody = {\n        paymentId,\n        amountMoney: amount ? {\n          amount: BigInt(amount),\n          currency: 'USD',\n        } : undefined,\n        idempotencyKey: `refund-${paymentId}-${Date.now()}`,\n        reason: 'Appointment cancellation',\n      };\n\n      const response = await refundsApi.refundPayment(requestBody);\n      return response.result;\n    } catch (error) {\n      console.error('Square refund error:', error);\n      throw new Error(`Refund processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  getWebhookSignatureKey(): string {\n    return process.env.SQUARE_WEBHOOK_SIGNATURE_KEY || '';\n  }\n}\n\nexport const squareService = new SquareService();","size_bytes":4881},"client/src/components/appointment-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, FileText, Edit, X } from \"lucide-react\";\n\ninterface AppointmentCardProps {\n  appointment: any;\n  showActions?: boolean;\n}\n\nexport default function AppointmentCard({ appointment, showActions = false }: AppointmentCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-secondary/10 text-secondary';\n      case 'pending':\n        return 'bg-accent/10 text-accent';\n      case 'completed':\n        return 'bg-primary/10 text-primary';\n      case 'cancelled':\n        return 'bg-destructive/10 text-destructive';\n      default:\n        return 'bg-muted/10 text-muted-foreground';\n    }\n  };\n\n  const handleViewAgreement = () => {\n    // In production, this would open the DocuSign document\n    window.open(`https://demo.docusign.net/Signing/${appointment.docusignEnvelopeId}`, '_blank');\n  };\n\n  const handleReschedule = () => {\n    // In production, this would open a reschedule modal\n    console.log('Reschedule appointment:', appointment.id);\n  };\n\n  const handleCancel = () => {\n    // In production, this would show a confirmation dialog and call API\n    console.log('Cancel appointment:', appointment.id);\n  };\n\n  return (\n    <Card className=\"mb-8\" data-testid=\"card-appointment-details\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Calendar className=\"text-primary mr-3\" />\n          Your Upcoming Appointment\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Date:</span>\n              <span className=\"font-medium text-card-foreground\" data-testid=\"text-appointment-date\">\n                {new Date(appointment.preferredDate).toLocaleDateString()}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Time:</span>\n              <span className=\"font-medium text-card-foreground\" data-testid=\"text-appointment-time\">\n                {appointment.preferredTime || 'To be confirmed'}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Status:</span>\n              <Badge className={getStatusColor(appointment.status)} data-testid=\"badge-appointment-status\">\n                {appointment.status}\n              </Badge>\n            </div>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Service ID:</span>\n              <span className=\"font-medium text-card-foreground\" data-testid=\"text-service-id\">\n                {appointment.id}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Payment:</span>\n              <span className={`font-medium ${appointment.paymentStatus === 'paid' ? 'text-secondary' : 'text-accent'}`} data-testid=\"text-payment-status\">\n                {appointment.paymentStatus} (${appointment.paymentAmount})\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Agreement:</span>\n              {appointment.docusignEnvelopeId ? (\n                <Button\n                  variant=\"link\"\n                  size=\"sm\"\n                  className=\"text-primary hover:underline p-0 h-auto\"\n                  onClick={handleViewAgreement}\n                  data-testid=\"button-view-agreement\"\n                >\n                  <FileText className=\"mr-1 h-3 w-3\" />\n                  View Agreement\n                </Button>\n              ) : (\n                <span className=\"text-muted-foreground text-sm\">Pending</span>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        {showActions && (\n          <div className=\"mt-6 flex space-x-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handleReschedule}\n              disabled={appointment.status !== 'pending' && appointment.status !== 'confirmed'}\n              data-testid=\"button-reschedule-appointment\"\n            >\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Reschedule\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={handleCancel}\n              disabled={appointment.status === 'completed' || appointment.status === 'cancelled'}\n              data-testid=\"button-cancel-appointment\"\n            >\n              <X className=\"mr-2 h-4 w-4\" />\n              Cancel\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5079},"client/src/components/booking-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport SquarePayment from \"./square-payment\";\nimport MockPayment from \"./mock-payment\";\nimport { insertAppointmentSchema } from \"@shared/schema\";\nimport { Calendar, Lock, CheckCircle, Clock } from \"lucide-react\";\n\ntype BookingStep = 'form' | 'payment' | 'confirmation';\n\ninterface BookingFormData {\n  fullName: string;\n  email: string;\n  phone: string;\n  address: string;\n  preferredDate: Date;\n  preferredTime?: string;\n  isReady: boolean;\n}\n\nexport default function BookingForm() {\n  const [step, setStep] = useState<BookingStep>('form');\n  const [appointmentData, setAppointmentData] = useState<any>(null);\n  const [paymentSourceId, setPaymentSourceId] = useState<string>('');\n\n  const { isAuthenticated, user } = useAuth(); // Assuming user object with token is available\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(insertAppointmentSchema),\n    defaultValues: {\n      fullName: '',\n      email: '',\n      phone: '',\n      address: '',\n      preferredDate: new Date(),\n      preferredTime: '',\n      isReady: false,\n    },\n  });\n\n  // Mocking formData and appointmentId for handlePaymentSuccess\n  // In a real scenario, these would come from form state and mutation response respectively\n  const formData = form.getValues(); \n  const [appointmentId, setAppointmentId] = useState<string | null>(null);\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (data: BookingFormData & { paymentSourceId: string }) => {\n      return await apiRequest('POST', '/api/appointments', data);\n    },\n    onSuccess: async (response) => {\n      const result = await response.json();\n      setAppointmentData(result.appointment);\n      setStep('confirmation');\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/my'] });\n      toast({\n        title: \"Success!\",\n        description: result.message || \"Appointment booked successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Authentication Required\",\n          description: \"Please log in to book an appointment\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 1000);\n        return;\n      }\n\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: BookingFormData) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to book an appointment\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 1000);\n      return;\n    }\n\n    setAppointmentData(data);\n    setStep('payment');\n  };\n\n  const handlePaymentSuccess = async (sourceId: string) => {\n    try {\n      if (!isAuthenticated || !user) {\n        throw new Error('Please log in to complete your booking');\n      }\n\n      // Show immediate success feedback\n      toast({\n        title: \"Payment Successful!\",\n        description: \"Processing your appointment...\",\n      });\n\n      // Use the mutation instead of direct fetch\n      const appointmentData = {\n        ...form.getValues(),\n        paymentSourceId: sourceId,\n      };\n\n      const response = await createAppointmentMutation.mutateAsync(appointmentData);\n      \n      // The mutation's onSuccess handler will handle the rest\n    } catch (error) {\n      console.error('Booking error:', error);\n      toast({\n        title: \"Booking Failed\",\n        description: error instanceof Error ? error.message : \"Failed to create appointment\",\n        variant: \"destructive\",\n      });\n      setStep('form');\n    }\n  };\n\n  const getMinDate = () => {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return tomorrow.toISOString().split('T')[0];\n  };\n\n  const getMaxDate = () => {\n    const maxDate = new Date();\n    maxDate.setDate(maxDate.getDate() + 7);\n    return maxDate.toISOString().split('T')[0];\n  };\n\n  return (\n    <Card className=\"shadow-2xl border border-primary/20 bg-gradient-to-br from-card to-card/80 backdrop-blur-sm\" data-testid=\"card-booking-form\">\n      <CardContent className=\"p-8 md:p-12\">\n        {step === 'form' && (\n          <div data-testid=\"booking-step-form\" className=\"animate-fade-in\">\n            {/* Form Header */}\n            <div className=\"text-center mb-10\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Calendar className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-3xl font-bold mb-3 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                Book Your Security Audit\n              </h3>\n              <p className=\"text-lg text-muted-foreground\">\n                Fill out the form below to schedule your free property security assessment\n              </p>\n            </div>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n                <div className=\"grid md:grid-cols-2 gap-8\">\n                  <FormField\n                    control={form.control}\n                    name=\"fullName\"\n                    render={({ field }) => (\n                      <FormItem className=\"space-y-3\">\n                        <FormLabel className=\"text-lg font-semibold text-foreground\">Full Name *</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter your full name\" \n                            className=\"h-12 text-lg border-2 border-border focus:border-primary transition-all\"\n                            {...field} \n                            data-testid=\"input-full-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem className=\"space-y-3\">\n                        <FormLabel className=\"text-lg font-semibold text-foreground\">Email Address *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"email\"\n                            placeholder=\"your.email@example.com\" \n                            className=\"h-12 text-lg border-2 border-border focus:border-primary transition-all\"\n                            {...field} \n                            data-testid=\"input-email\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"tel\"\n                            placeholder=\"(555) 123-4567\" \n                            {...field} \n                            data-testid=\"input-phone\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"preferredDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Preferred Date *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"date\"\n                            min={getMinDate()}\n                            max={getMaxDate()}\n                            {...field}\n                            value={field.value ? new Date(field.value).toISOString().split('T')[0] : ''}\n                            onChange={(e) => field.onChange(new Date(e.target.value))}\n                            data-testid=\"input-preferred-date\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Property Address *</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Enter your complete property address\" \n                          className=\"h-24 resize-none\"\n                          {...field} \n                          data-testid=\"textarea-address\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"preferredTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Preferred Time</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-preferred-time\">\n                              <SelectValue placeholder=\"Select time slot\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"9:00 AM - 11:00 AM\">9:00 AM - 11:00 AM</SelectItem>\n                            <SelectItem value=\"11:00 AM - 1:00 PM\">11:00 AM - 1:00 PM</SelectItem>\n                            <SelectItem value=\"1:00 PM - 3:00 PM\">1:00 PM - 3:00 PM</SelectItem>\n                            <SelectItem value=\"3:00 PM - 5:00 PM\">3:00 PM - 5:00 PM</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"isReady\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-end space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-ready\"\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm\">\n                          I'm ready to proceed with the audit and protection service\n                        </FormLabel>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 rounded-2xl p-8 border-2 border-primary/20 relative overflow-hidden\">\n                  <div className=\"absolute top-0 right-0 w-32 h-32 bg-primary/5 rounded-full blur-2xl\"></div>\n                  <div className=\"relative z-10\">\n                    <h4 className=\"font-bold text-xl text-card-foreground mb-6 flex items-center\">\n                      <Lock className=\"mr-3 w-6 h-6 text-primary\" />\n                      Service Investment\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center text-lg p-3 bg-white/50 rounded-lg\">\n                        <span className=\"font-medium text-muted-foreground\">First Month Service:</span>\n                        <span className=\"font-bold text-foreground text-xl\">$100.00</span>\n                      </div>\n                      <div className=\"flex justify-between items-center text-lg p-3 bg-white/50 rounded-lg\">\n                        <span className=\"font-medium text-muted-foreground\">Audit & Setup Fee:</span>\n                        <span className=\"font-bold text-foreground text-xl\">$125.00</span>\n                      </div>\n                      <div className=\"border-t-2 border-primary/30 my-4\"></div>\n                      <div className=\"flex justify-between items-center text-2xl font-bold p-4 bg-gradient-to-r from-primary/20 to-secondary/20 rounded-xl border border-primary/30\">\n                        <span className=\"text-card-foreground\">Total Today:</span>\n                        <span className=\"text-primary text-3xl\">$225.00</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-primary via-secondary to-accent hover:from-primary/90 hover:via-secondary/90 hover:to-accent/90 text-white py-6 text-xl font-bold transition-all transform hover:scale-105 shadow-2xl hover:shadow-3xl\"\n                  disabled={form.formState.isSubmitting}\n                  data-testid=\"button-book-appointment\"\n                >\n                  <Lock className=\"mr-4 w-6 h-6\" />\n                  {form.formState.isSubmitting ? (\n                    <div className=\"flex items-center\">\n                      <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3\"></div>\n                      Processing...\n                    </div>\n                  ) : (\n                    'Book Appointment & Secure Payment'\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </div>\n        )}\n\n        {step === 'payment' && (\n          <div className=\"text-center animate-fade-in\" data-testid=\"booking-step-payment\">\n            <div className=\"mb-12\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-6 pulse-glow\">\n                <Lock className=\"text-white text-4xl\" />\n              </div>\n              <h3 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">Secure Payment</h3>\n              <p className=\"text-xl text-muted-foreground\">Complete your payment to confirm your appointment</p>\n            </div>\n\n            {/* Use mock payment in development */}\n            <MockPayment\n              amount={22500} // $225.00 in cents\n              onSuccess={handlePaymentSuccess}\n              onError={(error) => {\n                toast({\n                  title: \"Payment Failed\",\n                  description: error,\n                  variant: \"destructive\",\n                });\n                setStep('form');\n              }}\n            />\n          </div>\n        )}\n\n        {step === 'confirmation' && (\n          <div className=\"text-center py-16 animate-bounce-in\" data-testid=\"booking-step-confirmation\">\n            <div className=\"relative\">\n              <CheckCircle className=\"text-secondary text-8xl mx-auto mb-8 animate-pulse\" />\n              <div className=\"absolute inset-0 text-secondary text-8xl mx-auto mb-8 pulse-glow opacity-50\"></div>\n            </div>\n            <h3 className=\"text-5xl font-bold mb-6 bg-gradient-to-r from-secondary to-accent bg-clip-text text-transparent\">Appointment Confirmed!</h3>\n            <p className=\"text-xl text-muted-foreground mb-12 max-w-2xl mx-auto leading-relaxed\">\n              🎉 Your security audit has been successfully scheduled! Check your email for detailed confirmation and next steps.\n            </p>\n\n            <div className=\"bg-muted/30 rounded-lg p-6 max-w-md mx-auto border border-border mb-8\">\n              <h4 className=\"font-semibold mb-3 text-card-foreground\">Appointment Details:</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium\">Date:</span>\n                  <span data-testid=\"text-appointment-date\">\n                    {appointmentData?.preferredDate ? new Date(appointmentData.preferredDate).toLocaleDateString() : 'TBD'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium\">Time:</span>\n                  <span data-testid=\"text-appointment-time\">\n                    {appointmentData?.preferredTime || 'To be confirmed'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium\">Service ID:</span>\n                  <span data-testid=\"text-service-id\">\n                    {appointmentData?.id || 'Processing...'}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <Button \n                className=\"bg-primary text-primary-foreground px-6 py-3 font-medium hover:bg-primary/90 transition-colors\"\n                onClick={() => window.location.href = '/dashboard'}\n                data-testid=\"button-access-dashboard\"\n              >\n                <Calendar className=\"mr-2\" />\n                Access Your Dashboard\n              </Button>\n\n              <p className=\"text-sm text-muted-foreground\">\n                A DocuSign agreement will be sent to your email shortly.\n              </p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":19208},"client/src/components/square-payment.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lock, CreditCard } from \"lucide-react\";\n\ninterface SquarePaymentProps {\n  amount: number; // in cents\n  onSuccess: (sourceId: string) => void;\n  onError: (error: string) => void;\n}\n\nexport default function SquarePayment({\n  amount,\n  onSuccess,\n  onError,\n}: SquarePaymentProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [squareReady, setSquareReady] = useState(false);\n  const cardButtonRef = useRef<HTMLDivElement>(null);\n  const cardRef = useRef<any>(null);\n  const { toast } = useToast();\n\n  // Placeholder for payment object and card object to satisfy the type checker for now\n  // These will be populated by the Square SDK\n  const [payments, setPayments] = useState<any>(null);\n  const [card, setCard] = useState<any>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Get application ID and location ID from environment variables\n  const applicationId = import.meta.env.VITE_SQUARE_APPLICATION_ID;\n  const locationId = import.meta.env.VITE_SQUARE_LOCATION_ID;\n  const environment = import.meta.env.VITE_SQUARE_ENVIRONMENT || 'sandbox';\n\n  // Load Square Web SDK\n  useEffect(() => {\n    // Check if SDK is already loaded\n    if (window.Square) {\n      console.log(\"Square Web SDK already loaded\");\n      return;\n    }\n\n    // Check if script is already being loaded\n    const existingScript = document.querySelector('script[src*=\"square.js\"]');\n    if (existingScript) {\n      console.log(\"Square Web SDK script already exists\");\n      return;\n    }\n\n    const script = document.createElement(\"script\");\n    script.src = environment === 'production' \n      ? \"https://web.squarecdn.com/v1/square.js\"\n      : \"https://sandbox.web.squarecdn.com/v1/square.js\";\n    script.async = true;\n    script.onload = () => {\n      console.log(\"Square Web SDK loaded successfully\");\n    };\n    script.onerror = (error) => {\n      console.error(\"Failed to load Square Web SDK:\", error);\n      onError(\n        \"Failed to load payment system. Please check your internet connection.\",\n      );\n    };\n\n    document.head.appendChild(script);\n\n    return () => {\n      // Cleanup on unmount\n      const scriptToRemove = document.querySelector('script[src*=\"square.js\"]');\n      if (scriptToRemove) {\n        document.head.removeChild(scriptToRemove);\n      }\n    };\n  }, [onError]);\n\n  useEffect(() => {\n    async function initializeSquare() {\n      try {\n        // Wait for Square SDK to load\n        if (!window.Square) {\n          console.error(\"Square Web SDK not loaded\");\n          onError(\"Square Web SDK not loaded\");\n          return;\n        }\n\n        if (!applicationId || !locationId) {\n          console.error(\"Square credentials not configured\");\n          onError(\"Payment system not configured. Please contact support.\");\n          return;\n        }\n\n        // Initialize payments with proper error handling\n        const payments = window.Square.payments(applicationId, locationId);\n        setPayments(payments);\n\n        // Create and attach card with better error handling\n        const card = await payments.card({\n          style: {\n            \".input-container\": {\n              borderColor: \"#d1d5db\",\n              borderRadius: \"6px\",\n            },\n            \".input-container.is-focus\": {\n              borderColor: \"#3b82f6\",\n            },\n            \".input-container.is-error\": {\n              borderColor: \"#ef4444\",\n            },\n          },\n        });\n\n        await card.attach(cardButtonRef.current);\n        setCard(card);\n\n        console.log(\"Square payment form initialized successfully\");\n      } catch (error) {\n        console.error(\"Failed to initialize Square payments:\", error);\n        onError(\n          `Payment form initialization failed: ${error.message || \"Unknown error\"}`,\n        );\n      }\n    }\n\n    // Add a small delay to ensure DOM is ready\n    const timer = setTimeout(initializeSquare, 100);\n    return () => clearTimeout(timer);\n  }, [applicationId, locationId, onError]);\n\n  const handlePayment = async () => {\n    if (!card || !payments) {\n      onError(\n        \"Payment system not ready. Please refresh the page and try again.\",\n      );\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      console.log(\"Starting payment tokenization...\");\n      const result = await card.tokenize();\n\n      if (result.status === \"OK\" && result.token) {\n        console.log(\"Tokenization successful\");\n\n        // Send token to backend\n        const response = await fetch(\"/api/payment/process\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            sourceId: result.token,\n            amount: amount,\n          }),\n        });\n\n        if (response.ok) {\n          const responseData = await response.json();\n          console.log(\"Payment processed successfully\");\n          onSuccess(result.token);\n        } else {\n          const errorData = await response.json();\n          console.error(\"Payment processing failed:\", errorData);\n          onError(errorData.message || \"Payment processing failed on server\");\n        }\n      } else {\n        console.error(\"Tokenization failed:\", result.errors);\n        const errorMessage =\n          result.errors && result.errors.length > 0\n            ? result.errors[0].detail\n            : \"Invalid payment information\";\n        onError(errorMessage);\n      }\n    } catch (error) {\n      console.error(\"Payment processing error:\", error);\n      onError(`Payment processing failed: ${error.message || \"Unknown error\"}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Card className=\"max-w-md mx-auto\" data-testid=\"card-square-payment\">\n      <CardContent className=\"p-6\">\n        <div className=\"text-center mb-6\">\n          <Lock className=\"text-muted-foreground text-2xl mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Secure Payment</h3>\n          <p className=\"text-2xl font-bold text-primary\">\n            ${(amount / 100).toFixed(2)}\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading payment form...</p>\n          </div>\n        ) : squareReady ? (\n          <div className=\"space-y-6\">\n            <div\n              ref={cardButtonRef}\n              id=\"card-container\"\n              className=\"min-h-[120px] p-4 border border-input rounded-lg bg-background\"\n              data-testid=\"square-card-form\"\n            />\n\n            <Button\n              onClick={handlePayment}\n              className=\"w-full bg-primary text-primary-foreground py-3 font-semibold hover:bg-primary/90 transition-colors\"\n              disabled={isLoading || isProcessing}\n              data-testid=\"button-pay-now\"\n            >\n              <CreditCard className=\"mr-2 h-4 w-4\" />\n              {isProcessing ? \"Processing...\" : \"Pay Now\"}\n            </Button>\n\n            <div className=\"text-center text-xs text-muted-foreground\">\n              <Lock className=\"inline h-3 w-3 mr-1\" />\n              Secured by Square • Your payment information is encrypted\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground mb-4\">\n              Payment form failed to load\n            </p>\n            <Button\n              variant=\"outline\"\n              onClick={() => window.location.reload()}\n              data-testid=\"button-retry-payment\"\n            >\n              Retry\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7971},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n\n      const response = await fetch('/api/auth/user', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        localStorage.removeItem('token'); // Remove invalid token\n        throw new Error('Unauthorized');\n      }\n\n      return response.json();\n    },\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n    logout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    },\n  };\n}\n","size_bytes":852},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem('token');\n  \n  const headers: Record<string, string> = {\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    ...(token ? { \"Authorization\": `Bearer ${token}` } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('token');\n    \n    const headers: Record<string, string> = {\n      ...(token ? { \"Authorization\": `Bearer ${token}` } : {}),\n    };\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1741},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Calendar, Clock, CheckCircle, DollarSign, Users, TrendingUp, Eye, Edit, Trash2 } from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect if not authenticated or not admin\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n    \n    if (!isLoading && isAuthenticated && !(user as any)?.isAdmin) {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: stats } = useQuery<any>({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated && (user as any)?.isAdmin,\n  });\n\n  const { data: appointments } = useQuery<any[]>({\n    queryKey: [\"/api/admin/appointments\"],\n    enabled: isAuthenticated && (user as any)?.isAdmin,\n  });\n\n  if (isLoading || !isAuthenticated || !(user as any)?.isAdmin) {\n    return <div className=\"min-h-screen flex items-center justify-center\">Loading...</div>;\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-secondary/10 text-secondary';\n      case 'pending':\n        return 'bg-accent/10 text-accent';\n      case 'completed':\n        return 'bg-primary/10 text-primary';\n      case 'cancelled':\n        return 'bg-destructive/10 text-destructive';\n      default:\n        return 'bg-muted/10 text-muted-foreground';\n    }\n  };\n\n  const getPaymentStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'text-secondary';\n      case 'pending':\n        return 'text-accent';\n      case 'failed':\n        return 'text-destructive';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Shield className=\"text-primary text-2xl mr-3\" />\n              <span className=\"text-xl font-bold text-foreground\">GuardPortal Admin</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                Welcome, {(user as any)?.firstName || 'Admin'}\n              </span>\n              <Button\n                variant=\"ghost\"\n                onClick={() => window.location.href = '/home'}\n                data-testid=\"button-home\"\n              >\n                Home\n              </Button>\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={() => window.location.href = '/api/logout'}\n                data-testid=\"button-logout\"\n              >\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage appointments and monitor system performance</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"card-total-appointments\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Appointments</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\">{(stats as any)?.total || 0}</p>\n                </div>\n                <Calendar className=\"text-primary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"card-pending-appointments\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Pending</p>\n                  <p className=\"text-2xl font-bold text-accent\">{(stats as any)?.pending || 0}</p>\n                </div>\n                <Clock className=\"text-accent text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"card-confirmed-appointments\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Confirmed</p>\n                  <p className=\"text-2xl font-bold text-secondary\">{(stats as any)?.confirmed || 0}</p>\n                </div>\n                <CheckCircle className=\"text-secondary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"card-revenue\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Revenue</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\">\n                    ${(stats as any)?.revenue?.toLocaleString() || '0'}\n                  </p>\n                </div>\n                <DollarSign className=\"text-primary text-2xl\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Appointments Table */}\n        <Card data-testid=\"card-appointments-table\">\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle>Recent Appointments</CardTitle>\n              <div className=\"flex space-x-2\">\n                <select className=\"px-3 py-2 rounded-lg border border-input bg-background text-foreground text-sm\">\n                  <option>All Status</option>\n                  <option>Pending</option>\n                  <option>Confirmed</option>\n                  <option>Completed</option>\n                </select>\n                <Button size=\"sm\" data-testid=\"button-add-appointment\">\n                  Add Appointment\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">Client</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">Date</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">Payment</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {(appointments as any[])?.map((appointment: any) => (\n                    <tr key={appointment.id} className=\"hover:bg-muted/30\" data-testid={`row-appointment-${appointment.id}`}>\n                      <td className=\"px-6 py-4\">\n                        <div>\n                          <p className=\"font-medium text-card-foreground\">{appointment.fullName}</p>\n                          <p className=\"text-sm text-muted-foreground\">{appointment.email}</p>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 text-sm text-card-foreground\">\n                        {new Date(appointment.preferredDate).toLocaleDateString()} {appointment.preferredTime}\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <Badge className={getStatusColor(appointment.status)}>\n                          {appointment.status}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <span className=\"text-sm font-medium text-card-foreground\">\n                          ${appointment.paymentAmount}\n                        </span>\n                        <p className={`text-xs ${getPaymentStatusColor(appointment.paymentStatus)}`}>\n                          {appointment.paymentStatus}\n                        </p>\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"text-primary hover:text-primary/80\"\n                            data-testid={`button-view-${appointment.id}`}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"text-muted-foreground hover:text-foreground\"\n                            data-testid={`button-edit-${appointment.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"text-destructive hover:text-destructive/80\"\n                            data-testid={`button-delete-${appointment.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  )) || (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-8 text-center text-muted-foreground\">\n                        No appointments found\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11236},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Shield, Calendar, FileText, Settings } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const { user, isAuthenticated } = useAuth();\n  \n  const { data: appointments } = useQuery<any[]>({\n    queryKey: [\"/api/appointments/my\"],\n    enabled: isAuthenticated, // Only fetch if user is authenticated\n  });\n\n  const upcomingAppointment = appointments?.[0];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"nav-glass border-b border-border/50\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-20\">\n            <div className=\"flex items-center animate-fade-in\">\n              <div className=\"relative\">\n                <Shield className=\"text-primary text-3xl mr-3 floating-element\" />\n                <div className=\"absolute inset-0 text-primary text-3xl mr-3 pulse-glow opacity-50\"></div>\n              </div>\n              <span className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                GuardPortal\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {isAuthenticated ? (\n                <>\n                  <div className=\"hidden sm:flex items-center px-4 py-2 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-full border border-primary/20\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3 animate-pulse\"></div>\n                    <span className=\"text-sm font-medium text-foreground\">\n                      Welcome, {(user as any)?.firstName || 'User'}\n                    </span>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    className=\"hover:scale-105 transition-transform border-red-200 text-red-600 hover:bg-red-50\"\n                    onClick={() => window.location.href = '/api/logout'}\n                    data-testid=\"button-logout\"\n                  >\n                    Logout\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Link to=\"/login\">\n                    <Button variant=\"ghost\" className=\"hover:scale-105 transition-transform\">\n                      Login\n                    </Button>\n                  </Link>\n                  <Link to=\"/signup\">\n                    <Button className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 hover:scale-105 transition-all\">\n                      Sign Up\n                    </Button>\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Dashboard Header with gradient background */}\n        <div className=\"mb-12 relative\">\n          <div className=\"bg-gradient-to-r from-primary/5 via-secondary/5 to-accent/5 rounded-3xl p-8 border border-border/50\">\n            <div className=\"relative z-10\">\n              <h1 className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent mb-4 animate-fade-in\">\n                Dashboard\n              </h1>\n              <p className=\"text-xl text-muted-foreground animate-slide-up\">\n                Manage your property protection services and monitor your security status\n              </p>\n            </div>\n            {/* Decorative elements */}\n            <div className=\"absolute top-4 right-4 w-20 h-20 bg-primary/10 rounded-full blur-xl\"></div>\n            <div className=\"absolute bottom-4 left-4 w-16 h-16 bg-secondary/10 rounded-full blur-lg\"></div>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {/* Quick Actions */}\n          <Card className=\"feature-card bg-gradient-to-br from-card to-card/80 border border-primary/20\" data-testid=\"card-quick-actions\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center text-xl font-bold\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center mr-3\">\n                  <Settings className=\"w-5 h-5 text-white\" />\n                </div>\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"outline\" className=\"w-full justify-start h-12 text-left hover:scale-105 transition-all border-primary/30 hover:border-primary hover:bg-primary/5\" data-testid=\"button-view-appointments\">\n                  <Calendar className=\"mr-3 h-5 w-5 text-primary\" />\n                  <span className=\"font-medium\">View My Appointments</span>\n                </Button>\n              </Link>\n              \n              {(user as any)?.isAdmin && (\n                <Link href=\"/admin\">\n                  <Button variant=\"outline\" className=\"w-full justify-start h-12 text-left hover:scale-105 transition-all border-secondary/30 hover:border-secondary hover:bg-secondary/5\" data-testid=\"button-admin-panel\">\n                    <Shield className=\"mr-3 h-5 w-5 text-secondary\" />\n                    <span className=\"font-medium\">Admin Panel</span>\n                  </Button>\n                </Link>\n              )}\n              \n              <Button \n                className=\"w-full justify-start h-12 bg-gradient-to-r from-accent/80 to-accent hover:from-accent hover:to-accent/90 hover:scale-105 transition-all shadow-lg\"\n                onClick={() => window.location.href = '/'}\n                data-testid=\"button-book-new\"\n              >\n                <Calendar className=\"mr-3 h-5 w-5\" />\n                <span className=\"font-medium text-white\">Book New Appointment</span>\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Upcoming Appointment */}\n          {upcomingAppointment && (\n            <Card data-testid=\"card-upcoming-appointment\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"mr-2\" />\n                  Upcoming Appointment\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Date:</span>\n                    <span className=\"font-medium text-card-foreground\">\n                      {new Date(upcomingAppointment.preferredDate).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Time:</span>\n                    <span className=\"font-medium text-card-foreground\">\n                      {upcomingAppointment.preferredTime || 'TBD'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Status:</span>\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                      upcomingAppointment.status === 'confirmed' \n                        ? 'bg-secondary/10 text-secondary' \n                        : 'bg-accent/10 text-accent'\n                    }`}>\n                      {upcomingAppointment.status}\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4\">\n                  <Link href=\"/dashboard\">\n                    <Button size=\"sm\" className=\"w-full\" data-testid=\"button-view-details\">\n                      View Details\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Protection Status */}\n          <Card className=\"feature-card bg-gradient-to-br from-card to-card/80 border border-secondary/20\" data-testid=\"card-protection-status\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center text-xl font-bold\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-secondary to-accent rounded-lg flex items-center justify-center mr-3\">\n                  <Shield className=\"w-5 h-5 text-white\" />\n                </div>\n                Protection Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 gap-6\">\n                <div className=\"text-center p-6 bg-gradient-to-br from-secondary/20 to-secondary/10 rounded-2xl border border-secondary/30 hover:scale-105 transition-transform\">\n                  <div className=\"w-12 h-12 bg-secondary rounded-full flex items-center justify-center mx-auto mb-4 pulse-glow\">\n                    <Shield className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">Property Monitoring</p>\n                  <p className=\"font-bold text-secondary text-lg\">🟢 Active</p>\n                </div>\n                \n                <div className=\"text-center p-6 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl border border-primary/30 hover:scale-105 transition-transform\">\n                  <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center mx-auto mb-4 pulse-glow\">\n                    <FileText className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">Title Protection</p>\n                  <p className=\"font-bold text-primary text-lg\">🟢 Active</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Welcome Message for New Users */}\n        {(!appointments || appointments.length === 0) && (\n          <Card className=\"mt-8\" data-testid=\"card-welcome-message\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center py-8\">\n                <Shield className=\"h-16 w-16 text-primary mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Welcome to GuardPortal!</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  You haven't scheduled any appointments yet. Get started by booking your free security audit.\n                </p>\n                <Button \n                  onClick={() => window.location.href = '/'}\n                  data-testid=\"button-get-started\"\n                >\n                  <Calendar className=\"mr-2 h-4 w-4\" />\n                  Schedule Free Audit\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11276},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport BookingForm from \"@/components/booking-form\";\nimport { Shield, CheckCircle, Calendar, Lock, Phone, Mail, Clock } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Landing() {\n  const [showBooking, setShowBooking] = useState(false);\n  const { isAuthenticated, user } = useAuth();\n\n  const scrollToBooking = () => {\n    setShowBooking(true);\n    setTimeout(() => {\n      document.getElementById('booking')?.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }, 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 nav-glass\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-20\">\n            <div className=\"flex items-center space-x-4 animate-fade-in\">\n              <div className=\"flex items-center\">\n                <div className=\"relative\">\n                  <Shield className=\"text-primary text-3xl mr-3 floating-element\" />\n                  <div className=\"absolute inset-0 text-primary text-3xl mr-3 pulse-glow opacity-50\"></div>\n                </div>\n                <span className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                  GuardPortal\n                </span>\n              </div>\n            </div>\n\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#services\" className=\"text-muted-foreground hover:text-primary transition-all duration-300 hover:scale-105 font-medium\">Services</a>\n              <a href=\"#process\" className=\"text-muted-foreground hover:text-primary transition-all duration-300 hover:scale-105 font-medium\">Process</a>\n              <a href=\"#contact\" className=\"text-muted-foreground hover:text-primary transition-all duration-300 hover:scale-105 font-medium\">Contact</a>\n            </nav>\n\n            <div className=\"flex items-center space-x-3\">\n              {isAuthenticated ? (\n                <Button\n                  variant=\"outline\"\n                  className=\"hover:scale-105 transition-transform\"\n                  onClick={() => window.location.href = '/dashboard'}\n                  data-testid=\"button-dashboard\"\n                >\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  Dashboard\n                </Button>\n              ) : (\n                <>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"hover:scale-105 transition-transform\"\n                    onClick={() => window.location.href = '/login'}\n                    data-testid=\"button-login\"\n                  >\n                    Login\n                  </Button>\n                  <Button\n                    className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 hover:scale-105 transition-all shadow-lg\"\n                    onClick={() => window.location.href = '/signup'}\n                    data-testid=\"button-signup\"\n                  >\n                    Sign Up\n                  </Button>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"hero-gradient text-white py-24 lg:py-40 relative overflow-hidden\">\n        {/* Floating Background Elements */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"absolute top-20 left-10 w-32 h-32 bg-white/10 rounded-full blur-xl animate-pulse\"></div>\n          <div className=\"absolute top-40 right-20 w-24 h-24 bg-white/5 rounded-full blur-lg animate-pulse delay-1000\"></div>\n          <div className=\"absolute bottom-20 left-1/4 w-40 h-40 bg-white/5 rounded-full blur-2xl animate-pulse delay-2000\"></div>\n        </div>\n        \n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"max-w-5xl mx-auto text-center\">\n            {/* Animated Badge */}\n            <div className=\"inline-flex items-center px-6 py-2 mb-8 bg-white/20 backdrop-blur-sm rounded-full border border-white/30 animate-bounce-in\">\n              <Shield className=\"w-4 h-4 mr-2\" />\n              <span className=\"text-sm font-medium\">#1 Property Protection Service</span>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl lg:text-8xl font-extrabold mb-8 leading-tight animate-fade-in\">\n              Protect Your Home's{' '}\n              <span className=\"bg-gradient-to-r from-yellow-300 via-orange-300 to-red-300 bg-clip-text text-transparent animate-pulse\">\n                Asset & Title\n              </span>{' '}\n              Today\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl lg:text-3xl mb-12 text-white/90 leading-relaxed max-w-4xl mx-auto animate-slide-up\">\n              Professional property protection services with comprehensive title monitoring, fraud prevention, and 24/7 security audits for your complete peace of mind.\n            </p>\n\n            {/* Feature Pills */}\n            <div className=\"flex flex-wrap justify-center gap-4 mb-12 animate-slide-up\">\n              <div className=\"flex items-center px-6 py-3 bg-white/10 backdrop-blur-sm rounded-full border border-white/20 hover:bg-white/20 transition-all\">\n                <CheckCircle className=\"text-green-300 mr-3 w-5 h-5\" />\n                <span className=\"font-medium\">Free Security Audit</span>\n              </div>\n              <div className=\"flex items-center px-6 py-3 bg-white/10 backdrop-blur-sm rounded-full border border-white/20 hover:bg-white/20 transition-all\">\n                <CheckCircle className=\"text-green-300 mr-3 w-5 h-5\" />\n                <span className=\"font-medium\">24/7 Monitoring</span>\n              </div>\n              <div className=\"flex items-center px-6 py-3 bg-white/10 backdrop-blur-sm rounded-full border border-white/20 hover:bg-white/20 transition-all\">\n                <CheckCircle className=\"text-green-300 mr-3 w-5 h-5\" />\n                <span className=\"font-medium\">Expert Protection</span>\n              </div>\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-8 animate-bounce-in\">\n              <Button\n                size=\"lg\"\n                className=\"bg-white text-primary px-10 py-6 text-xl font-bold hover:bg-white/90 transform hover:scale-110 transition-all shadow-2xl hover:shadow-white/25 group\"\n                onClick={scrollToBooking}\n                data-testid=\"button-schedule-audit\"\n              >\n                <Calendar className=\"mr-3 w-6 h-6 group-hover:animate-bounce\" />\n                Schedule Your Free Audit Now\n              </Button>\n              \n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-white/30 text-white hover:bg-white hover:text-primary px-8 py-6 text-lg font-semibold backdrop-blur-sm transition-all hover:scale-105\"\n                onClick={() => document.getElementById('services')?.scrollIntoView({ behavior: 'smooth' })}\n                data-testid=\"button-learn-more\"\n              >\n                Learn More\n              </Button>\n            </div>\n\n            {/* Trust Indicators */}\n            <div className=\"flex flex-wrap justify-center items-center gap-8 text-white/80 text-sm animate-fade-in\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"w-4 h-4 mr-2 text-green-300\" />\n                <span>No obligations</span>\n              </div>\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"w-4 h-4 mr-2 text-green-300\" />\n                <span>Same-day booking</span>\n              </div>\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"w-4 h-4 mr-2 text-green-300\" />\n                <span>Trusted by 10,000+ homeowners</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"services\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4 text-foreground\">Why Choose Our Protection Services?</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Comprehensive protection for your most valuable asset with industry-leading security measures.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 lg:gap-12\">\n            <Card className=\"feature-card group relative bg-gradient-to-br from-card to-card/50\">\n              <CardContent className=\"p-10\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center mb-8 group-hover:scale-110 transition-transform duration-300\">\n                  <Shield className=\"text-primary text-3xl\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-6 text-card-foreground group-hover:text-primary transition-colors\">Title Fraud Protection</h3>\n                <p className=\"text-muted-foreground leading-relaxed text-lg\">\n                  Advanced monitoring systems detect and prevent title fraud attempts before they can affect your property ownership. Get instant alerts for any suspicious activity.\n                </p>\n                <div className=\"mt-6 flex items-center text-primary font-semibold opacity-0 group-hover:opacity-100 transition-opacity\">\n                  <span>Learn more</span>\n                  <CheckCircle className=\"ml-2 w-4 h-4\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"feature-card group relative bg-gradient-to-br from-card to-card/50\">\n              <CardContent className=\"p-10\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-secondary/20 to-secondary/10 rounded-2xl flex items-center justify-center mb-8 group-hover:scale-110 transition-transform duration-300\">\n                  <Lock className=\"text-secondary text-3xl\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-6 text-card-foreground group-hover:text-secondary transition-colors\">Asset Monitoring</h3>\n                <p className=\"text-muted-foreground leading-relaxed text-lg\">\n                  Continuous surveillance of your property records and immediate alerts for any suspicious activities or changes. 24/7 automated protection.\n                </p>\n                <div className=\"mt-6 flex items-center text-secondary font-semibold opacity-0 group-hover:opacity-100 transition-opacity\">\n                  <span>Learn more</span>\n                  <CheckCircle className=\"ml-2 w-4 h-4\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"feature-card group relative bg-gradient-to-br from-card to-card/50\">\n              <CardContent className=\"p-10\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-accent/20 to-accent/10 rounded-2xl flex items-center justify-center mb-8 group-hover:scale-110 transition-transform duration-300\">\n                  <Phone className=\"text-accent text-3xl\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-6 text-card-foreground group-hover:text-accent transition-colors\">Expert Support</h3>\n                <p className=\"text-muted-foreground leading-relaxed text-lg\">\n                  Dedicated protection specialists available 24/7 to respond to threats and guide you through any issues. Direct access to security experts.\n                </p>\n                <div className=\"mt-6 flex items-center text-accent font-semibold opacity-0 group-hover:opacity-100 transition-opacity\">\n                  <span>Learn more</span>\n                  <CheckCircle className=\"ml-2 w-4 h-4\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section id=\"process\" className=\"py-20 bg-muted/50\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4 text-foreground\">Simple 3-Step Process</h2>\n            <p className=\"text-lg text-muted-foreground\">Get protected in minutes with our streamlined onboarding process</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"step-number w-16 h-16 rounded-full text-white text-xl font-bold flex items-center justify-center mx-auto mb-6 bg-gradient-to-r from-primary to-secondary\">\n                1\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4 text-foreground\">Book Your Audit</h3>\n              <p className=\"text-muted-foreground\">Schedule a free security audit at your convenience. Our expert will visit your property within 7 days.</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"step-number w-16 h-16 rounded-full text-white text-xl font-bold flex items-center justify-center mx-auto mb-6 bg-gradient-to-r from-primary to-secondary\">\n                2\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4 text-foreground\">Secure Payment</h3>\n              <p className=\"text-muted-foreground\">Complete payment securely through Square. $100 first month + $125 service charge for comprehensive protection.</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"step-number w-16 h-16 rounded-full text-white text-xl font-bold flex items-center justify-center mx-auto mb-6 bg-gradient-to-r from-primary to-secondary\">\n                3\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4 text-foreground\">Instant Protection</h3>\n              <p className=\"text-muted-foreground\">Sign digital agreement via DocuSign and get immediate protection coverage with automated monitoring.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Booking Section */}\n      {showBooking && (\n        <section id=\"booking\" className=\"py-20 bg-background\">\n          <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"text-center mb-12\">\n                <h2 className=\"text-3xl md:text-4xl font-bold mb-4 text-foreground\">Schedule Your Free Security Audit</h2>\n                <p className=\"text-lg text-muted-foreground\">Book your appointment and secure your property today</p>\n              </div>\n\n              <BookingForm />\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12\" id=\"contact\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center mb-4\">\n                <Shield className=\"text-primary text-2xl mr-3\" />\n                <span className=\"text-xl font-bold text-foreground\">GuardPortal</span>\n              </div>\n              <p className=\"text-muted-foreground mb-4 leading-relaxed\">\n                Protecting your property and assets with advanced monitoring and professional security services.\n              </p>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold text-card-foreground mb-4\">Services</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>Title Protection</li>\n                <li>Asset Monitoring</li>\n                <li>Security Audits</li>\n                <li>24/7 Support</li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold text-card-foreground mb-4\">Contact</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li className=\"flex items-center\">\n                  <Phone className=\"mr-2 h-4 w-4\" />\n                  <span>(555) 123-4567</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Mail className=\"mr-2 h-4 w-4\" />\n                  <span>support@guardportal.com</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Clock className=\"mr-2 h-4 w-4\" />\n                  <span>24/7 Support</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-border mt-8 pt-8 text-center text-muted-foreground\">\n            <p>&copy; 2024 GuardPortal. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":17302},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/user-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Calendar, FileText, Bell, Edit, X } from \"lucide-react\";\nimport AppointmentCard from \"@/components/appointment-card\";\n\nexport default function UserDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: appointments } = useQuery<any[]>({\n    queryKey: [\"/api/appointments/my\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen flex items-center justify-center\">Loading...</div>;\n  }\n\n  const upcomingAppointment = (appointments as any[])?.find(\n    (apt: any) => apt.status !== 'completed' && apt.status !== 'cancelled'\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Shield className=\"text-primary text-2xl mr-3\" />\n              <span className=\"text-xl font-bold text-foreground\">GuardPortal</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                Welcome, {(user as any)?.firstName || 'User'}\n              </span>\n              <Button\n                variant=\"ghost\"\n                onClick={() => window.location.href = '/home'}\n                data-testid=\"button-home\"\n              >\n                Home\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={() => window.location.href = '/api/logout'}\n                data-testid=\"button-logout\"\n              >\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8 max-w-4xl\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">My Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage your appointments and protection services</p>\n        </div>\n\n        {/* Current Appointment */}\n        {upcomingAppointment && (\n          <AppointmentCard \n            appointment={upcomingAppointment} \n            showActions \n            data-testid=\"card-current-appointment\"\n          />\n        )}\n\n        {/* Protection Status */}\n        <Card className=\"mb-8\" data-testid=\"card-protection-status\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Shield className=\"mr-3 text-secondary\" />\n              Protection Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-4 bg-secondary/10 rounded-lg\">\n                <Shield className=\"h-8 w-8 text-secondary mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">Property Monitoring</p>\n                <p className=\"font-semibold text-secondary\">Active</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-primary/10 rounded-lg\">\n                <FileText className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">Title Protection</p>\n                <p className=\"font-semibold text-primary\">Active</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-accent/10 rounded-lg\">\n                <Bell className=\"h-8 w-8 text-accent mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">Alert System</p>\n                <p className=\"font-semibold text-accent\">Enabled</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* All Appointments */}\n        <Card data-testid=\"card-all-appointments\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"mr-3\" />\n              Appointment History\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {(appointments as any[])?.length ? (\n              <div className=\"space-y-4\">\n                {(appointments as any[]).map((appointment: any) => (\n                  <div key={appointment.id} className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <p className=\"font-medium text-card-foreground\">\n                            {new Date(appointment.preferredDate).toLocaleDateString()}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {appointment.preferredTime || 'Time TBD'}\n                          </p>\n                        </div>\n                        <Badge className={`${\n                          appointment.status === 'confirmed' ? 'bg-secondary/10 text-secondary' :\n                          appointment.status === 'pending' ? 'bg-accent/10 text-accent' :\n                          appointment.status === 'completed' ? 'bg-primary/10 text-primary' :\n                          'bg-destructive/10 text-destructive'\n                        }`}>\n                          {appointment.status}\n                        </Badge>\n                      </div>\n                      <div className=\"mt-2 flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <span>Service ID: {appointment.id}</span>\n                        <span>${appointment.paymentAmount}</span>\n                        <span className={appointment.paymentStatus === 'paid' ? 'text-secondary' : 'text-accent'}>\n                          {appointment.paymentStatus}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      {appointment.docusignEnvelopeId && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          data-testid={`button-view-agreement-${appointment.id}`}\n                        >\n                          <FileText className=\"h-4 w-4 mr-1\" />\n                          Agreement\n                        </Button>\n                      )}\n                      {appointment.status === 'pending' && (\n                        <>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            data-testid={`button-reschedule-${appointment.id}`}\n                          >\n                            <Edit className=\"h-4 w-4 mr-1\" />\n                            Reschedule\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"destructive\"\n                            data-testid={`button-cancel-${appointment.id}`}\n                          >\n                            <X className=\"h-4 w-4 mr-1\" />\n                            Cancel\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No Appointments Yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  You haven't scheduled any appointments. Get started with a free security audit.\n                </p>\n                <Button \n                  onClick={() => window.location.href = '/'}\n                  data-testid=\"button-schedule-first\"\n                >\n                  <Calendar className=\"mr-2 h-4 w-4\" />\n                  Schedule Your First Audit\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9085},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"deploy-guide.md":{"content":"# GoDaddy VPS Deployment Guide\n\n## Prerequisites\n\n1. **Database Setup**: You need a PostgreSQL database running on your VPS\n2. **Environment Variables**: Configure the `.env` file with your production values\n\n## Step 1: Database Setup\n\nCreate a PostgreSQL database on your GoDaddy VPS:\n\n```bash\n# Connect to PostgreSQL\nsudo -u postgres psql\n\n# Create database and user\nCREATE DATABASE your_database_name;\nCREATE USER your_username WITH PASSWORD 'your_secure_password';\nGRANT ALL PRIVILEGES ON DATABASE your_database_name TO your_username;\n\\q\n```\n\n## Step 2: Environment Configuration\n\n1. Copy `.env.example` to `.env`\n2. Update the `DATABASE_URL` with your VPS database credentials:\n   ```\n   DATABASE_URL=postgresql://your_username:your_secure_password@localhost:5432/your_database_name\n   ```\n\n## Step 3: Production Build and Deploy\n\n```bash\n# Install dependencies\nnpm install\n\n# Run database migrations\nnpm run db:push\n\n# Build the application\nnpm run build\n\n# Start the production server\nnpm start\n```\n\n## Step 4: Process Manager (Recommended)\n\nUse PM2 to keep your application running:\n\n```bash\n# Install PM2 globally\nnpm install -g pm2\n\n# Start your application with PM2\npm2 start dist/index.js --name \"guardportal\"\n\n# Save PM2 configuration\npm2 save\npm2 startup\n```\n\n## Common Issues\n\n1. **Database Connection Error**: Ensure your DATABASE_URL is correct and the database is accessible\n2. **Port Issues**: Make sure port 5000 is open in your firewall\n3. **Authentication Issues**: Verify your Replit Auth credentials are correct for production\n\n## Security Notes\n\n- Never commit your `.env` file to version control\n- Use strong passwords for your database\n- Keep your dependencies updated\n- Configure SSL certificates for HTTPS in production","size_bytes":1748},"shared/utils.ts":{"content":"\nimport { randomBytes } from 'crypto';\n\nexport function generateId(): string {\n  return randomBytes(16).toString('hex');\n}\n","size_bytes":123},"server/services/authService.ts":{"content":"\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { storage } from '../storage';\nimport { emailService } from './emailService';\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  isAdmin?: boolean;\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n}\n\ninterface SignupData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nclass AuthService {\n  private jwtSecret = process.env.JWT_SECRET || 'your-secret-key';\n  private saltRounds = 12;\n\n  async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, this.saltRounds);\n  }\n\n  async comparePassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  generateToken(user: AuthUser): string {\n    return jwt.sign(\n      { \n        id: user.id, \n        email: user.email,\n        isAdmin: user.isAdmin || false\n      },\n      this.jwtSecret,\n      { expiresIn: '7d' }\n    );\n  }\n\n  verifyToken(token: string): AuthUser | null {\n    try {\n      return jwt.verify(token, this.jwtSecret) as AuthUser;\n    } catch {\n      return null;\n    }\n  }\n\n  generateResetToken(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  async signup(data: SignupData): Promise<{ user: AuthUser; token: string }> {\n    // Check if user already exists\n    const existingUser = await storage.getUserByEmail(data.email);\n    if (existingUser) {\n      throw new Error('User already exists with this email');\n    }\n\n    // Hash password\n    const hashedPassword = await this.hashPassword(data.password);\n\n    // Create user\n    const user = await storage.createUser({\n      email: data.email,\n      password: hashedPassword,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      profileImageUrl: null,\n      isAdmin: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n\n    // Send welcome email (optional in development)\n    try {\n      if (process.env.NODE_ENV === 'production') {\n        await emailService.sendWelcomeEmail(user);\n      }\n    } catch (error) {\n      console.log('Welcome email not sent (development mode or email not configured)');\n    }\n\n    // Generate token\n    const token = this.generateToken({\n      id: user.id,\n      email: user.email!,\n      firstName: user.firstName!,\n      lastName: user.lastName!,\n      isAdmin: user.isAdmin || false,\n    });\n\n    return { \n      user: {\n        id: user.id,\n        email: user.email!,\n        firstName: user.firstName!,\n        lastName: user.lastName!,\n        isAdmin: user.isAdmin || false,\n      }, \n      token \n    };\n  }\n\n  async login(credentials: LoginCredentials): Promise<{ user: AuthUser; token: string }> {\n    // Get user by email\n    const user = await storage.getUserByEmail(credentials.email);\n    if (!user || !user.password) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Check password\n    const isValidPassword = await this.comparePassword(credentials.password, user.password);\n    if (!isValidPassword) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Generate token\n    const token = this.generateToken({\n      id: user.id,\n      email: user.email!,\n      firstName: user.firstName!,\n      lastName: user.lastName!,\n      isAdmin: user.isAdmin || false,\n    });\n\n    return { \n      user: {\n        id: user.id,\n        email: user.email!,\n        firstName: user.firstName!,\n        lastName: user.lastName!,\n        isAdmin: user.isAdmin || false,\n      }, \n      token \n    };\n  }\n\n  async forgotPassword(email: string): Promise<void> {\n    const user = await storage.getUserByEmail(email);\n    if (!user) {\n      // Don't reveal if user exists or not for security\n      return;\n    }\n\n    // Generate reset token\n    const resetToken = this.generateResetToken();\n    const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour from now\n\n    // Save reset token\n    await storage.savePasswordResetToken(user.id, resetToken, resetTokenExpiry);\n\n    // Send reset email\n    await emailService.sendPasswordResetEmail(user, resetToken);\n  }\n\n  async resetPassword(token: string, newPassword: string): Promise<void> {\n    // Verify reset token\n    const resetData = await storage.getPasswordResetToken(token);\n    if (!resetData || resetData.expiresAt < new Date()) {\n      throw new Error('Invalid or expired reset token');\n    }\n\n    // Hash new password\n    const hashedPassword = await this.hashPassword(newPassword);\n\n    // Update password\n    await storage.updateUserPassword(resetData.userId, hashedPassword);\n\n    // Delete reset token\n    await storage.deletePasswordResetToken(token);\n\n    // Send confirmation email\n    const user = await storage.getUser(resetData.userId);\n    if (user) {\n      await emailService.sendPasswordChangedEmail(user);\n    }\n  }\n}\n\nexport const authService = new AuthService();\n","size_bytes":4973},"client/src/components/mock-payment.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lock, CreditCard, CheckCircle } from \"lucide-react\";\n\ninterface MockPaymentProps {\n  amount: number; // in cents\n  onSuccess: (sourceId: string) => void;\n  onError: (error: string) => void;\n}\n\nexport default function MockPayment({\n  amount,\n  onSuccess,\n  onError,\n}: MockPaymentProps) {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [cardNumber, setCardNumber] = useState(\"4111111111111111\");\n  const [expiryDate, setExpiryDate] = useState(\"12/25\");\n  const [cvv, setCvv] = useState(\"123\");\n  const [cardName, setCardName] = useState(\"John Doe\");\n  const { toast } = useToast();\n\n  const handlePayment = async () => {\n    if (!cardNumber || !expiryDate || !cvv || !cardName) {\n      onError(\"Please fill in all payment fields\");\n      return;\n    }\n\n    setIsProcessing(true);\n\n    // Simulate processing delay\n    setTimeout(() => {\n      // Generate a mock payment token\n      const mockToken = `mock_token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      setIsProcessing(false);\n      \n      // Show success toast first\n      toast({\n        title: \"Payment Successful!\",\n        description: \"Your payment has been processed successfully.\",\n      });\n      \n      // Then call success callback\n      onSuccess(mockToken);\n    }, 2000);\n  };\n\n  return (\n    <Card className=\"max-w-md mx-auto\" data-testid=\"card-mock-payment\">\n      <CardContent className=\"p-6\">\n        <div className=\"text-center mb-6\">\n          <div className=\"bg-green-100 dark:bg-green-900 p-3 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n            <CheckCircle className=\"text-green-600 dark:text-green-400 text-2xl\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\">Development Payment</h3>\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            This is a mock payment for testing\n          </p>\n          <p className=\"text-2xl font-bold text-primary\">\n            ${(amount / 100).toFixed(2)}\n          </p>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"cardName\">Cardholder Name</Label>\n            <Input\n              id=\"cardName\"\n              placeholder=\"John Doe\"\n              value={cardName}\n              onChange={(e) => setCardName(e.target.value)}\n              data-testid=\"input-card-name\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"cardNumber\">Card Number</Label>\n            <Input\n              id=\"cardNumber\"\n              placeholder=\"4111 1111 1111 1111\"\n              value={cardNumber}\n              onChange={(e) => setCardNumber(e.target.value.replace(/\\s/g, ''))}\n              maxLength={16}\n              data-testid=\"input-card-number\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"expiryDate\">Expiry Date</Label>\n              <Input\n                id=\"expiryDate\"\n                placeholder=\"MM/YY\"\n                value={expiryDate}\n                onChange={(e) => setExpiryDate(e.target.value)}\n                maxLength={5}\n                data-testid=\"input-expiry-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"cvv\">CVV</Label>\n              <Input\n                id=\"cvv\"\n                placeholder=\"123\"\n                value={cvv}\n                onChange={(e) => setCvv(e.target.value)}\n                maxLength={4}\n                data-testid=\"input-cvv\"\n              />\n            </div>\n          </div>\n\n          <Button\n            onClick={handlePayment}\n            className=\"w-full bg-primary text-primary-foreground py-3 font-semibold hover:bg-primary/90 transition-colors\"\n            disabled={isProcessing}\n            data-testid=\"button-pay-now\"\n          >\n            <CreditCard className=\"mr-2 h-4 w-4\" />\n            {isProcessing ? \"Processing Payment...\" : \"Pay Now (Test)\"}\n          </Button>\n\n          <div className=\"text-center text-xs text-muted-foreground\">\n            <Lock className=\"inline h-3 w-3 mr-1\" />\n            Mock Payment for Development • No real charges will be made\n          </div>\n\n          <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n            <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n              💡 This is a development payment system. Use any valid-looking card details to test the booking flow.\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4879},"client/src/pages/forgot-password.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Mail, ArrowLeft, CheckCircle } from \"lucide-react\";\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmailSent, setIsEmailSent] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to send reset email');\n      }\n\n      setIsEmailSent(true);\n\n      toast({\n        title: \"Reset Email Sent\",\n        description: \"Check your email for password reset instructions.\",\n      });\n\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isEmailSent) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-red-100 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-2xl border-0 overflow-hidden\">\n          <CardHeader className=\"bg-gradient-to-r from-orange-600 to-red-600 text-white text-center py-8\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"bg-white/20 p-3 rounded-full\">\n                <CheckCircle className=\"h-8 w-8\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Email Sent!</CardTitle>\n            <p className=\"text-orange-100 mt-2\">Check your inbox for reset instructions</p>\n          </CardHeader>\n\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"space-y-4\">\n              <p className=\"text-gray-600\">\n                We've sent a password reset link to <strong>{email}</strong>\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                The link will expire in 1 hour for security reasons.\n              </p>\n\n              <div className=\"mt-6 pt-6 border-t\">\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  Didn't receive the email? Check your spam folder or try again.\n                </p>\n                <Button\n                  onClick={() => setIsEmailSent(false)}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  Send Another Email\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"mt-6\">\n              <Link\n                href=\"/login\"\n                className=\"inline-flex items-center text-orange-600 hover:text-orange-800 font-semibold hover:underline\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Login\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-red-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl border-0 overflow-hidden\">\n        <CardHeader className=\"bg-gradient-to-r from-orange-600 to-red-600 text-white text-center py-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-white/20 p-3 rounded-full\">\n              <Shield className=\"h-8 w-8\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Forgot Password?</CardTitle>\n          <p className=\"text-orange-100 mt-2\">No worries, we'll help you reset it</p>\n        </CardHeader>\n\n        <CardContent className=\"p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n                Email Address\n              </Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Enter your email address\"\n                  className=\"pl-10 h-12 border-2 focus:border-orange-500\"\n                  required\n                />\n              </div>\n              <p className=\"text-sm text-gray-500 mt-2\">\n                Enter the email associated with your account and we'll send you a link to reset your password.\n              </p>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full h-12 bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-white font-semibold text-lg shadow-lg\"\n            >\n              {isLoading ? \"Sending...\" : \"Send Reset Link\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <Link\n              href=\"/login\"\n              className=\"inline-flex items-center text-orange-600 hover:text-orange-800 font-semibold hover:underline\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Login\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5990},"client/src/pages/login.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Eye, EyeOff, Mail, Lock } from \"lucide-react\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      \n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been successfully logged in.\",\n      });\n\n      // Redirect to dashboard\n      setLocation('/dashboard');\n      \n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen hero-gradient flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Background decorative elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-white/10 rounded-full blur-xl animate-pulse\"></div>\n        <div className=\"absolute top-40 right-20 w-24 h-24 bg-white/5 rounded-full blur-lg animate-pulse delay-1000\"></div>\n        <div className=\"absolute bottom-20 left-1/4 w-40 h-40 bg-white/5 rounded-full blur-2xl animate-pulse delay-2000\"></div>\n      </div>\n      \n      <Card className=\"w-full max-w-lg shadow-2xl border border-white/20 backdrop-blur-sm bg-white/95 overflow-hidden relative z-10 animate-fade-in\">\n        <CardHeader className=\"bg-gradient-to-r from-primary via-secondary to-accent text-white text-center py-12\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"bg-white/20 p-4 rounded-full pulse-glow\">\n              <Shield className=\"h-10 w-10\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-4xl font-bold mb-2\">Welcome Back</CardTitle>\n          <p className=\"text-white/90 mt-2 text-lg\">Sign in to your GuardPortal account and secure your property</p>\n        </CardHeader>\n        \n        <CardContent className=\"p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n                Email Address\n              </Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Enter your email\"\n                  className=\"pl-10 h-12 border-2 focus:border-blue-500\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                Password\n              </Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Enter your password\"\n                  className=\"pl-10 pr-10 h-12 border-2 focus:border-blue-500\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Link\n                to=\"/forgot-password\"\n                className=\"text-sm text-blue-600 hover:text-blue-800 hover:underline\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold text-lg shadow-lg\"\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-gray-600\">\n              Don't have an account?{\" \"}\n              <Link\n                to=\"/signup\"\n                className=\"text-blue-600 hover:text-blue-800 font-semibold hover:underline\"\n              >\n                Sign up\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6010},"client/src/pages/reset-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Lock, Eye, EyeOff, CheckCircle, ArrowLeft } from \"lucide-react\";\n\nexport default function ResetPassword() {\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [searchParams] = useLocation();\n  const navigate = useLocation()[1]; // wouter's navigate is the second element of the returned array\n  const { toast } = useToast();\n\n  const token = searchParams.get('token');\n\n  useEffect(() => {\n    if (!token) {\n      toast({\n        title: \"Invalid Link\",\n        description: \"This password reset link is invalid or has expired.\",\n        variant: \"destructive\",\n      });\n      navigate('/forgot-password');\n    }\n  }, [token, navigate, toast]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (password.length < 8) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 8 characters long\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Password reset failed');\n      }\n\n      setIsSuccess(true);\n\n      toast({\n        title: \"Password Reset Successful\",\n        description: \"Your password has been updated successfully.\",\n      });\n\n    } catch (error) {\n      toast({\n        title: \"Reset Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isSuccess) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-100 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-2xl border-0 overflow-hidden\">\n          <CardHeader className=\"bg-gradient-to-r from-green-600 to-blue-600 text-white text-center py-8\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"bg-white/20 p-3 rounded-full\">\n                <CheckCircle className=\"h-8 w-8\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Password Reset!</CardTitle>\n            <p className=\"text-green-100 mt-2\">Your password has been updated</p>\n          </CardHeader>\n\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"space-y-4\">\n              <p className=\"text-gray-600\">\n                Your password has been successfully reset. You can now sign in with your new password.\n              </p>\n\n              <div className=\"mt-6 pt-6 border-t\">\n                <Button\n                  onClick={() => navigate('/login')}\n                  className=\"w-full h-12 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-semibold\"\n                >\n                  Sign In Now\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl border-0 overflow-hidden\">\n        <CardHeader className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white text-center py-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-white/20 p-3 rounded-full\">\n              <Shield className=\"h-8 w-8\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Reset Password</CardTitle>\n          <p className=\"text-purple-100 mt-2\">Enter your new password below</p>\n        </CardHeader>\n\n        <CardContent className=\"p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                New Password\n              </Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Enter new password\"\n                  className=\"pl-10 pr-10 h-12 border-2 focus:border-purple-500\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-gray-700\">\n                Confirm New Password\n              </Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  placeholder=\"Confirm new password\"\n                  className=\"pl-10 h-12 border-2 focus:border-purple-500\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded-lg\">\n              <p className=\"font-medium mb-1\">Password requirements:</p>\n              <ul className=\"text-xs space-y-1\">\n                <li>• At least 8 characters long</li>\n                <li>• Include uppercase and lowercase letters</li>\n                <li>• Include at least one number</li>\n              </ul>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full h-12 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold text-lg shadow-lg\"\n            >\n              {isLoading ? \"Updating...\" : \"Update Password\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <Link\n              href=\"/login\" // wouter uses href for Link component\n              className=\"inline-flex items-center text-purple-600 hover:text-purple-800 font-semibold hover:underline\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Login\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7919},"client/src/pages/signup.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Eye, EyeOff, Mail, Lock, User } from \"lucide-react\";\n\nexport default function Signup() {\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (formData.password.length < 8) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 8 characters long\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          email: formData.email,\n          password: formData.password,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Signup failed');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      \n      toast({\n        title: \"Account Created!\",\n        description: \"Welcome to GuardPortal! Check your email for confirmation.\",\n      });\n\n      // Redirect to dashboard\n      setLocation('/dashboard');\n      \n    } catch (error) {\n      toast({\n        title: \"Signup Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen hero-gradient flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Background decorative elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-white/10 rounded-full blur-xl animate-pulse\"></div>\n        <div className=\"absolute top-40 right-20 w-24 h-24 bg-white/5 rounded-full blur-lg animate-pulse delay-1000\"></div>\n        <div className=\"absolute bottom-20 left-1/4 w-40 h-40 bg-white/5 rounded-full blur-2xl animate-pulse delay-2000\"></div>\n      </div>\n      \n      <Card className=\"w-full max-w-lg shadow-2xl border border-white/20 backdrop-blur-sm bg-white/95 overflow-hidden relative z-10 animate-fade-in\">\n        <CardHeader className=\"bg-gradient-to-r from-primary via-secondary to-accent text-white text-center py-12\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"bg-white/20 p-4 rounded-full pulse-glow\">\n              <Shield className=\"h-10 w-10\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-4xl font-bold mb-2\">Join GuardPortal</CardTitle>\n          <p className=\"text-white/90 mt-2 text-lg\">Create your account and start protecting your property today</p>\n        </CardHeader>\n        \n        <CardContent className=\"p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\" className=\"text-sm font-medium text-gray-700\">\n                  First Name\n                </Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    type=\"text\"\n                    value={formData.firstName}\n                    onChange={handleChange}\n                    placeholder=\"First name\"\n                    className=\"pl-10 h-12 border-2 focus:border-green-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\" className=\"text-sm font-medium text-gray-700\">\n                  Last Name\n                </Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    type=\"text\"\n                    value={formData.lastName}\n                    onChange={handleChange}\n                    placeholder=\"Last name\"\n                    className=\"pl-10 h-12 border-2 focus:border-green-500\"\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n                Email Address\n              </Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={handleChange}\n                  placeholder=\"Enter your email\"\n                  className=\"pl-10 h-12 border-2 focus:border-green-500\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                Password\n              </Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={formData.password}\n                  onChange={handleChange}\n                  placeholder=\"Create password\"\n                  className=\"pl-10 pr-10 h-12 border-2 focus:border-green-500\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-gray-700\">\n                Confirm Password\n              </Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  value={formData.confirmPassword}\n                  onChange={handleChange}\n                  placeholder=\"Confirm password\"\n                  className=\"pl-10 h-12 border-2 focus:border-green-500\"\n                  required\n                />\n              </div>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full h-12 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-semibold text-lg shadow-lg\"\n            >\n              {isLoading ? \"Creating Account...\" : \"Create Account\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-gray-600\">\n              Already have an account?{\" \"}\n              <Link\n                to=\"/login\"\n                className=\"text-green-600 hover:text-green-800 font-semibold hover:underline\"\n              >\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8957},"ENVIRONMENT_SETUP.md":{"content":"# Environment Setup Guide\n\nیہ Asset & Title Protection Portal کے لیے environment variables کا مکمل گائیڈ ہے۔\n\n## Required Environment Variables\n\n### 1. Database Configuration (ضروری)\n```\nDATABASE_URL=postgresql://username:password@hostname:5432/database_name\n```\n- Replit میں database provision کرنے کے بعد یہ automatically set ہو جاتا ہے\n\n### 2. Authentication & Sessions (ضروری)\n```\nJWT_SECRET=your-super-secret-jwt-key-here-min-32-chars\nSESSION_SECRET=your-session-secret-key-here-min-32-chars\n```\n- یہ random strings ہونے چاہیئے، کم از کم 32 characters\n\n### 3. Replit Auth Configuration (Replit deployment کے لیے ضروری)\n```\nREPLIT_DOMAINS=your-repl-domain.replit.app\nREPL_ID=your-repl-id-here\nISSUER_URL=https://replit.com/oidc\n```\n\n## Optional Integrations\n\n### 4. Square Payment Integration\nDevelopment (Sandbox) کے لیے:\n```\nSQUARE_SANDBOX_ACCESS_TOKEN=your-square-sandbox-access-token\nSQUARE_SANDBOX_LOCATION_ID=your-square-sandbox-location-id\nVITE_SQUARE_APPLICATION_ID=your-square-application-id\nVITE_SQUARE_LOCATION_ID=your-square-location-id\nVITE_SQUARE_ENVIRONMENT=sandbox\n```\n\nProduction کے لیے:\n```\nSQUARE_ACCESS_TOKEN=your-square-production-access-token\nSQUARE_LOCATION_ID=your-square-production-location-id\nSQUARE_ENVIRONMENT=production\n```\n\n### 5. DocuSign Integration\n```\nDOCUSIGN_ACCOUNT_ID=your-docusign-account-id\nDOCUSIGN_INTEGRATION_KEY=your-docusign-integration-key\nDOCUSIGN_USER_ID=your-docusign-user-id\nDOCUSIGN_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\\nyour-private-key-here\\n-----END RSA PRIVATE KEY-----\"\n```\n\n### 6. Email Service (Gmail/SMTP)\n```\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-app-password\nFROM_EMAIL=noreply@yourdomain.com\n```\n\n## Setup Instructions\n\n1. `.env.example` کو copy کر کے `.env` نام سے save کریں\n2. اپنی actual values کے ساتھ placeholder values کو replace کریں\n3. Gmail کے لیے App Password بنائیں (2FA enable کرنا ہوگا)\n4. Square Developer Dashboard سے API keys حاصل کریں\n5. DocuSign Developer Account بنا کر integration keys حاصل کریں\n\n## Security Notes\n\n- کبھی بھی `.env` فائل کو repository میں commit نہ کریں\n- Production میں strong, unique secrets استعمال کریں\n- Third-party APIs کے لیے sandbox mode استعمال کریں development میں\n\n## Testing Without External Services\n\nApplication بغیر Square/DocuSign/Email کے بھی چل سکتی ہے:\n- Payments: Mock mode میں چلے گی\n- DocuSign: Disabled رہے گی\n- Emails: Console میں log ہوں گے\n\nصرف DATABASE_URL, JWT_SECRET, اور SESSION_SECRET required ہیں basic functionality کے لیے۔","size_bytes":2788}},"version":1}